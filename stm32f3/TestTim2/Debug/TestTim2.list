
TestTim2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001370  08001370  00011370  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013a0  080013a0  000113a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013a4  080013a4  000113a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080013a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          000000a0  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000a4  200000a4  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ec69  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b8a  00000000  00000000  0002ec9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000052a1  00000000  00000000  00030827  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006a0  00000000  00000000  00035ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009e8  00000000  00000000  00036168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003c7a  00000000  00000000  00036b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002c01  00000000  00000000  0003a7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003d3cb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000012d8  00000000  00000000  0003d448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001358 	.word	0x08001358

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001358 	.word	0x08001358

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f87c 	bl	80002d4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f836 	bl	8000254 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4a07      	ldr	r2, [pc, #28]	; (8000210 <HAL_Init+0x20>)
{
 80001f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 f817 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffe0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000208:	f000 ff9e 	bl	8001148 <HAL_MspInit>
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40022000 	.word	0x40022000

08000214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000020 	.word	0x20000020

08000224 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000020 	.word	0x20000020

08000230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000232:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000238:	041b      	lsls	r3, r3, #16
 800023a:	0c1b      	lsrs	r3, r3, #16
 800023c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000240:	0200      	lsls	r0, r0, #8
 8000242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000246:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800024a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800024c:	60d3      	str	r3, [r2, #12]
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000256:	b530      	push	{r4, r5, lr}
 8000258:	68dc      	ldr	r4, [r3, #12]
 800025a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000264:	2b04      	cmp	r3, #4
 8000266:	bf28      	it	cs
 8000268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	f04f 0501 	mov.w	r5, #1
 8000270:	fa05 f303 	lsl.w	r3, r5, r3
 8000274:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	bf8c      	ite	hi
 800027a:	3c03      	subhi	r4, #3
 800027c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027e:	4019      	ands	r1, r3
 8000280:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000282:	fa05 f404 	lsl.w	r4, r5, r4
 8000286:	3c01      	subs	r4, #1
 8000288:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800028a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028c:	ea42 0201 	orr.w	r2, r2, r1
 8000290:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	bfaf      	iteee	ge
 8000296:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	f000 000f 	andlt.w	r0, r0, #15
 800029e:	4b06      	ldrlt	r3, [pc, #24]	; (80002b8 <HAL_NVIC_SetPriority+0x64>)
 80002a0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	bfa5      	ittet	ge
 80002a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002b0:	bd30      	pop	{r4, r5, pc}
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000ed14 	.word	0xe000ed14

080002bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002bc:	0942      	lsrs	r2, r0, #5
 80002be:	2301      	movs	r3, #1
 80002c0:	f000 001f 	and.w	r0, r0, #31
 80002c4:	fa03 f000 	lsl.w	r0, r3, r0
 80002c8:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <HAL_NVIC_EnableIRQ+0x14>)
 80002ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ce:	4770      	bx	lr
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d4:	3801      	subs	r0, #1
 80002d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002da:	d20a      	bcs.n	80002f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	21f0      	movs	r1, #240	; 0xf0
 80002e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e010 	.word	0xe000e010
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000302:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000304:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000306:	bf0c      	ite	eq
 8000308:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800030c:	f022 0204 	bicne.w	r2, r2, #4
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	4770      	bx	lr
 8000314:	e000e010 	.word	0xe000e010

08000318 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000318:	4770      	bx	lr

0800031a <HAL_SYSTICK_IRQHandler>:
{
 800031a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800031c:	f7ff fffc 	bl	8000318 <HAL_SYSTICK_Callback>
 8000320:	bd08      	pop	{r3, pc}
	...

08000324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000328:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800032a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800032c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000494 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000330:	4a56      	ldr	r2, [pc, #344]	; (800048c <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000332:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000334:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000338:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800033a:	9c01      	ldr	r4, [sp, #4]
 800033c:	40dc      	lsrs	r4, r3
 800033e:	d102      	bne.n	8000346 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000340:	b005      	add	sp, #20
 8000342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000346:	2401      	movs	r4, #1
 8000348:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800034c:	9c01      	ldr	r4, [sp, #4]
 800034e:	ea14 050a 	ands.w	r5, r4, sl
 8000352:	f000 8093 	beq.w	800047c <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000356:	684c      	ldr	r4, [r1, #4]
 8000358:	f024 0b10 	bic.w	fp, r4, #16
 800035c:	f1bb 0f02 	cmp.w	fp, #2
 8000360:	d111      	bne.n	8000386 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000362:	08df      	lsrs	r7, r3, #3
 8000364:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000368:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800036c:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800036e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000372:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000376:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800037a:	690e      	ldr	r6, [r1, #16]
 800037c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000380:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000384:	623e      	str	r6, [r7, #32]
 8000386:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800038a:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 800038c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800038e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000392:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000394:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000398:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800039a:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800039e:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a2:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003aa:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ac:	d811      	bhi.n	80003d2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003ae:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003b0:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003b4:	68ce      	ldr	r6, [r1, #12]
 80003b6:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003ba:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003be:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003c0:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003c2:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003c6:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003ca:	409e      	lsls	r6, r3
 80003cc:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003d0:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003d2:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003d4:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003d6:	688e      	ldr	r6, [r1, #8]
 80003d8:	fa06 f60c 	lsl.w	r6, r6, ip
 80003dc:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003de:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80003e0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003e2:	d54b      	bpl.n	800047c <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003e8:	f046 0601 	orr.w	r6, r6, #1
 80003ec:	f8c8 6018 	str.w	r6, [r8, #24]
 80003f0:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003f4:	f023 0703 	bic.w	r7, r3, #3
 80003f8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003fc:	f006 0601 	and.w	r6, r6, #1
 8000400:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000404:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000406:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800040c:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800040e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000412:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000416:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800041a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800041e:	d02f      	beq.n	8000480 <HAL_GPIO_Init+0x15c>
 8000420:	4e1b      	ldr	r6, [pc, #108]	; (8000490 <HAL_GPIO_Init+0x16c>)
 8000422:	42b0      	cmp	r0, r6
 8000424:	d02e      	beq.n	8000484 <HAL_GPIO_Init+0x160>
 8000426:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800042a:	42b0      	cmp	r0, r6
 800042c:	d02c      	beq.n	8000488 <HAL_GPIO_Init+0x164>
 800042e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000432:	42b0      	cmp	r0, r6
 8000434:	bf14      	ite	ne
 8000436:	2605      	movne	r6, #5
 8000438:	2603      	moveq	r6, #3
 800043a:	fa06 f60e 	lsl.w	r6, r6, lr
 800043e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000442:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000444:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000446:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000448:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800044c:	bf0c      	ite	eq
 800044e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000450:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000452:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000454:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000456:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800045a:	bf0c      	ite	eq
 800045c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800045e:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000460:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000462:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000464:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000468:	bf0c      	ite	eq
 800046a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800046c:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 800046e:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000470:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000472:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000474:	bf54      	ite	pl
 8000476:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000478:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 800047a:	60d6      	str	r6, [r2, #12]
    position++;
 800047c:	3301      	adds	r3, #1
 800047e:	e75c      	b.n	800033a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000480:	2600      	movs	r6, #0
 8000482:	e7da      	b.n	800043a <HAL_GPIO_Init+0x116>
 8000484:	2601      	movs	r6, #1
 8000486:	e7d8      	b.n	800043a <HAL_GPIO_Init+0x116>
 8000488:	2602      	movs	r6, #2
 800048a:	e7d6      	b.n	800043a <HAL_GPIO_Init+0x116>
 800048c:	40010400 	.word	0x40010400
 8000490:	48000400 	.word	0x48000400
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000498:	b10a      	cbz	r2, 800049e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800049a:	6181      	str	r1, [r0, #24]
 800049c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800049e:	6281      	str	r1, [r0, #40]	; 0x28
 80004a0:	4770      	bx	lr

080004a2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004a2:	6943      	ldr	r3, [r0, #20]
 80004a4:	4059      	eors	r1, r3
 80004a6:	6141      	str	r1, [r0, #20]
 80004a8:	4770      	bx	lr
	...

080004ac <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ac:	6803      	ldr	r3, [r0, #0]
 80004ae:	07da      	lsls	r2, r3, #31
{
 80004b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80004b4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b6:	d411      	bmi.n	80004dc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004b8:	682b      	ldr	r3, [r5, #0]
 80004ba:	079b      	lsls	r3, r3, #30
 80004bc:	f100 8088 	bmi.w	80005d0 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004c0:	682b      	ldr	r3, [r5, #0]
 80004c2:	071c      	lsls	r4, r3, #28
 80004c4:	f100 80f8 	bmi.w	80006b8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004c8:	682b      	ldr	r3, [r5, #0]
 80004ca:	0758      	lsls	r0, r3, #29
 80004cc:	f100 8141 	bmi.w	8000752 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004d0:	69ea      	ldr	r2, [r5, #28]
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	f040 81d7 	bne.w	8000886 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004d8:	2000      	movs	r0, #0
 80004da:	e021      	b.n	8000520 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004dc:	4cba      	ldr	r4, [pc, #744]	; (80007c8 <HAL_RCC_OscConfig+0x31c>)
 80004de:	6863      	ldr	r3, [r4, #4]
 80004e0:	f003 030c 	and.w	r3, r3, #12
 80004e4:	2b04      	cmp	r3, #4
 80004e6:	d007      	beq.n	80004f8 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004e8:	6863      	ldr	r3, [r4, #4]
 80004ea:	f003 030c 	and.w	r3, r3, #12
 80004ee:	2b08      	cmp	r3, #8
 80004f0:	d119      	bne.n	8000526 <HAL_RCC_OscConfig+0x7a>
 80004f2:	6863      	ldr	r3, [r4, #4]
 80004f4:	03df      	lsls	r7, r3, #15
 80004f6:	d516      	bpl.n	8000526 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004fc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000500:	6821      	ldr	r1, [r4, #0]
 8000502:	fa93 f3a3 	rbit	r3, r3
 8000506:	fab3 f383 	clz	r3, r3
 800050a:	f003 031f 	and.w	r3, r3, #31
 800050e:	2201      	movs	r2, #1
 8000510:	fa02 f303 	lsl.w	r3, r2, r3
 8000514:	420b      	tst	r3, r1
 8000516:	d0cf      	beq.n	80004b8 <HAL_RCC_OscConfig+0xc>
 8000518:	686b      	ldr	r3, [r5, #4]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1cc      	bne.n	80004b8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800051e:	2001      	movs	r0, #1
}
 8000520:	b002      	add	sp, #8
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000526:	686a      	ldr	r2, [r5, #4]
 8000528:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800052c:	d125      	bne.n	800057a <HAL_RCC_OscConfig+0xce>
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000534:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000536:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000538:	68a9      	ldr	r1, [r5, #8]
 800053a:	f023 030f 	bic.w	r3, r3, #15
 800053e:	430b      	orrs	r3, r1
 8000540:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000542:	b352      	cbz	r2, 800059a <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000544:	f7ff fe6e 	bl	8000224 <HAL_GetTick>
 8000548:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800054c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800054e:	2701      	movs	r7, #1
 8000550:	fa96 f3a6 	rbit	r3, r6
 8000554:	6822      	ldr	r2, [r4, #0]
 8000556:	fa96 f3a6 	rbit	r3, r6
 800055a:	fab3 f383 	clz	r3, r3
 800055e:	f003 031f 	and.w	r3, r3, #31
 8000562:	fa07 f303 	lsl.w	r3, r7, r3
 8000566:	4213      	tst	r3, r2
 8000568:	d1a6      	bne.n	80004b8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800056a:	f7ff fe5b 	bl	8000224 <HAL_GetTick>
 800056e:	eba0 0008 	sub.w	r0, r0, r8
 8000572:	2864      	cmp	r0, #100	; 0x64
 8000574:	d9ec      	bls.n	8000550 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000576:	2003      	movs	r0, #3
 8000578:	e7d2      	b.n	8000520 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	b932      	cbnz	r2, 800058c <HAL_RCC_OscConfig+0xe0>
 800057e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000582:	6023      	str	r3, [r4, #0]
 8000584:	6823      	ldr	r3, [r4, #0]
 8000586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800058a:	e7d3      	b.n	8000534 <HAL_RCC_OscConfig+0x88>
 800058c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000590:	d1f5      	bne.n	800057e <HAL_RCC_OscConfig+0xd2>
 8000592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000596:	6023      	str	r3, [r4, #0]
 8000598:	e7c9      	b.n	800052e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800059a:	f7ff fe43 	bl	8000224 <HAL_GetTick>
 800059e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005a2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005a4:	2701      	movs	r7, #1
 80005a6:	fa96 f3a6 	rbit	r3, r6
 80005aa:	6822      	ldr	r2, [r4, #0]
 80005ac:	fa96 f3a6 	rbit	r3, r6
 80005b0:	fab3 f383 	clz	r3, r3
 80005b4:	f003 031f 	and.w	r3, r3, #31
 80005b8:	fa07 f303 	lsl.w	r3, r7, r3
 80005bc:	4213      	tst	r3, r2
 80005be:	f43f af7b 	beq.w	80004b8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005c2:	f7ff fe2f 	bl	8000224 <HAL_GetTick>
 80005c6:	eba0 0008 	sub.w	r0, r0, r8
 80005ca:	2864      	cmp	r0, #100	; 0x64
 80005cc:	d9eb      	bls.n	80005a6 <HAL_RCC_OscConfig+0xfa>
 80005ce:	e7d2      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005d0:	4c7d      	ldr	r4, [pc, #500]	; (80007c8 <HAL_RCC_OscConfig+0x31c>)
 80005d2:	6863      	ldr	r3, [r4, #4]
 80005d4:	f013 0f0c 	tst.w	r3, #12
 80005d8:	d007      	beq.n	80005ea <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005da:	6863      	ldr	r3, [r4, #4]
 80005dc:	f003 030c 	and.w	r3, r3, #12
 80005e0:	2b08      	cmp	r3, #8
 80005e2:	d121      	bne.n	8000628 <HAL_RCC_OscConfig+0x17c>
 80005e4:	6863      	ldr	r3, [r4, #4]
 80005e6:	03de      	lsls	r6, r3, #15
 80005e8:	d41e      	bmi.n	8000628 <HAL_RCC_OscConfig+0x17c>
 80005ea:	2302      	movs	r3, #2
 80005ec:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005f0:	6821      	ldr	r1, [r4, #0]
 80005f2:	fa93 f3a3 	rbit	r3, r3
 80005f6:	fab3 f383 	clz	r3, r3
 80005fa:	f003 031f 	and.w	r3, r3, #31
 80005fe:	2201      	movs	r2, #1
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	420b      	tst	r3, r1
 8000606:	d002      	beq.n	800060e <HAL_RCC_OscConfig+0x162>
 8000608:	692b      	ldr	r3, [r5, #16]
 800060a:	4293      	cmp	r3, r2
 800060c:	d187      	bne.n	800051e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800060e:	6821      	ldr	r1, [r4, #0]
 8000610:	23f8      	movs	r3, #248	; 0xf8
 8000612:	fa93 f3a3 	rbit	r3, r3
 8000616:	fab3 f283 	clz	r2, r3
 800061a:	696b      	ldr	r3, [r5, #20]
 800061c:	4093      	lsls	r3, r2
 800061e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000622:	4313      	orrs	r3, r2
 8000624:	6023      	str	r3, [r4, #0]
 8000626:	e74b      	b.n	80004c0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000628:	692a      	ldr	r2, [r5, #16]
 800062a:	2601      	movs	r6, #1
 800062c:	b30a      	cbz	r2, 8000672 <HAL_RCC_OscConfig+0x1c6>
 800062e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000632:	fab3 f383 	clz	r3, r3
 8000636:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800063a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	2702      	movs	r7, #2
 8000642:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000644:	f7ff fdee 	bl	8000224 <HAL_GetTick>
 8000648:	4680      	mov	r8, r0
 800064a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800064e:	6822      	ldr	r2, [r4, #0]
 8000650:	fa97 f3a7 	rbit	r3, r7
 8000654:	fab3 f383 	clz	r3, r3
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	fa06 f303 	lsl.w	r3, r6, r3
 8000660:	4213      	tst	r3, r2
 8000662:	d1d4      	bne.n	800060e <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000664:	f7ff fdde 	bl	8000224 <HAL_GetTick>
 8000668:	eba0 0008 	sub.w	r0, r0, r8
 800066c:	2802      	cmp	r0, #2
 800066e:	d9ec      	bls.n	800064a <HAL_RCC_OscConfig+0x19e>
 8000670:	e781      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
 8000672:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000676:	fab3 f383 	clz	r3, r3
 800067a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800067e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	2702      	movs	r7, #2
 8000686:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000688:	f7ff fdcc 	bl	8000224 <HAL_GetTick>
 800068c:	4680      	mov	r8, r0
 800068e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000692:	6822      	ldr	r2, [r4, #0]
 8000694:	fa97 f3a7 	rbit	r3, r7
 8000698:	fab3 f383 	clz	r3, r3
 800069c:	f003 031f 	and.w	r3, r3, #31
 80006a0:	fa06 f303 	lsl.w	r3, r6, r3
 80006a4:	4213      	tst	r3, r2
 80006a6:	f43f af0b 	beq.w	80004c0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006aa:	f7ff fdbb 	bl	8000224 <HAL_GetTick>
 80006ae:	eba0 0008 	sub.w	r0, r0, r8
 80006b2:	2802      	cmp	r0, #2
 80006b4:	d9eb      	bls.n	800068e <HAL_RCC_OscConfig+0x1e2>
 80006b6:	e75e      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006b8:	69aa      	ldr	r2, [r5, #24]
 80006ba:	4e43      	ldr	r6, [pc, #268]	; (80007c8 <HAL_RCC_OscConfig+0x31c>)
 80006bc:	4943      	ldr	r1, [pc, #268]	; (80007cc <HAL_RCC_OscConfig+0x320>)
 80006be:	2401      	movs	r4, #1
 80006c0:	b31a      	cbz	r2, 800070a <HAL_RCC_OscConfig+0x25e>
 80006c2:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006c6:	fab3 f383 	clz	r3, r3
 80006ca:	440b      	add	r3, r1
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	2702      	movs	r7, #2
 80006d0:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80006d2:	f7ff fda7 	bl	8000224 <HAL_GetTick>
 80006d6:	4680      	mov	r8, r0
 80006d8:	fa97 f3a7 	rbit	r3, r7
 80006dc:	fa97 f3a7 	rbit	r3, r7
 80006e0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006e4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80006e6:	fa97 f3a7 	rbit	r3, r7
 80006ea:	fab3 f383 	clz	r3, r3
 80006ee:	f003 031f 	and.w	r3, r3, #31
 80006f2:	fa04 f303 	lsl.w	r3, r4, r3
 80006f6:	4213      	tst	r3, r2
 80006f8:	f47f aee6 	bne.w	80004c8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006fc:	f7ff fd92 	bl	8000224 <HAL_GetTick>
 8000700:	eba0 0008 	sub.w	r0, r0, r8
 8000704:	2802      	cmp	r0, #2
 8000706:	d9e7      	bls.n	80006d8 <HAL_RCC_OscConfig+0x22c>
 8000708:	e735      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
 800070a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800070e:	fab3 f383 	clz	r3, r3
 8000712:	440b      	add	r3, r1
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	2702      	movs	r7, #2
 8000718:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800071a:	f7ff fd83 	bl	8000224 <HAL_GetTick>
 800071e:	4680      	mov	r8, r0
 8000720:	fa97 f3a7 	rbit	r3, r7
 8000724:	fa97 f3a7 	rbit	r3, r7
 8000728:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800072c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800072e:	fa97 f3a7 	rbit	r3, r7
 8000732:	fab3 f383 	clz	r3, r3
 8000736:	f003 031f 	and.w	r3, r3, #31
 800073a:	fa04 f303 	lsl.w	r3, r4, r3
 800073e:	4213      	tst	r3, r2
 8000740:	f43f aec2 	beq.w	80004c8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000744:	f7ff fd6e 	bl	8000224 <HAL_GetTick>
 8000748:	eba0 0008 	sub.w	r0, r0, r8
 800074c:	2802      	cmp	r0, #2
 800074e:	d9e7      	bls.n	8000720 <HAL_RCC_OscConfig+0x274>
 8000750:	e711      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000752:	4c1d      	ldr	r4, [pc, #116]	; (80007c8 <HAL_RCC_OscConfig+0x31c>)
 8000754:	69e3      	ldr	r3, [r4, #28]
 8000756:	00d9      	lsls	r1, r3, #3
 8000758:	d434      	bmi.n	80007c4 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	69e3      	ldr	r3, [r4, #28]
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61e3      	str	r3, [r4, #28]
 8000762:	69e3      	ldr	r3, [r4, #28]
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800076c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800076e:	4f18      	ldr	r7, [pc, #96]	; (80007d0 <HAL_RCC_OscConfig+0x324>)
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	05da      	lsls	r2, r3, #23
 8000774:	d52e      	bpl.n	80007d4 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000776:	68eb      	ldr	r3, [r5, #12]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d13c      	bne.n	80007f6 <HAL_RCC_OscConfig+0x34a>
 800077c:	6a23      	ldr	r3, [r4, #32]
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000784:	f7ff fd4e 	bl	8000224 <HAL_GetTick>
 8000788:	2702      	movs	r7, #2
 800078a:	4682      	mov	sl, r0
 800078c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800078e:	f04f 0801 	mov.w	r8, #1
 8000792:	fa97 f3a7 	rbit	r3, r7
 8000796:	fa97 f3a7 	rbit	r3, r7
 800079a:	2b00      	cmp	r3, #0
 800079c:	d06b      	beq.n	8000876 <HAL_RCC_OscConfig+0x3ca>
 800079e:	6a22      	ldr	r2, [r4, #32]
 80007a0:	fa99 f3a9 	rbit	r3, r9
 80007a4:	fab3 f383 	clz	r3, r3
 80007a8:	f003 031f 	and.w	r3, r3, #31
 80007ac:	fa08 f303 	lsl.w	r3, r8, r3
 80007b0:	4213      	tst	r3, r2
 80007b2:	d057      	beq.n	8000864 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 80007b4:	2e00      	cmp	r6, #0
 80007b6:	f43f ae8b 	beq.w	80004d0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007ba:	69e3      	ldr	r3, [r4, #28]
 80007bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007c0:	61e3      	str	r3, [r4, #28]
 80007c2:	e685      	b.n	80004d0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80007c4:	2600      	movs	r6, #0
 80007c6:	e7d2      	b.n	800076e <HAL_RCC_OscConfig+0x2c2>
 80007c8:	40021000 	.word	0x40021000
 80007cc:	10908120 	.word	0x10908120
 80007d0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80007dc:	f7ff fd22 	bl	8000224 <HAL_GetTick>
 80007e0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	d4c6      	bmi.n	8000776 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007e8:	f7ff fd1c 	bl	8000224 <HAL_GetTick>
 80007ec:	eba0 0008 	sub.w	r0, r0, r8
 80007f0:	2864      	cmp	r0, #100	; 0x64
 80007f2:	d9f6      	bls.n	80007e2 <HAL_RCC_OscConfig+0x336>
 80007f4:	e6bf      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007f6:	bb3b      	cbnz	r3, 8000848 <HAL_RCC_OscConfig+0x39c>
 80007f8:	6a23      	ldr	r3, [r4, #32]
 80007fa:	f023 0301 	bic.w	r3, r3, #1
 80007fe:	6223      	str	r3, [r4, #32]
 8000800:	6a23      	ldr	r3, [r4, #32]
 8000802:	f023 0304 	bic.w	r3, r3, #4
 8000806:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000808:	f7ff fd0c 	bl	8000224 <HAL_GetTick>
 800080c:	2702      	movs	r7, #2
 800080e:	4682      	mov	sl, r0
 8000810:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000812:	f04f 0801 	mov.w	r8, #1
 8000816:	fa97 f3a7 	rbit	r3, r7
 800081a:	fa97 f3a7 	rbit	r3, r7
 800081e:	b373      	cbz	r3, 800087e <HAL_RCC_OscConfig+0x3d2>
 8000820:	6a22      	ldr	r2, [r4, #32]
 8000822:	fa99 f3a9 	rbit	r3, r9
 8000826:	fab3 f383 	clz	r3, r3
 800082a:	f003 031f 	and.w	r3, r3, #31
 800082e:	fa08 f303 	lsl.w	r3, r8, r3
 8000832:	4213      	tst	r3, r2
 8000834:	d0be      	beq.n	80007b4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000836:	f7ff fcf5 	bl	8000224 <HAL_GetTick>
 800083a:	f241 3388 	movw	r3, #5000	; 0x1388
 800083e:	eba0 000a 	sub.w	r0, r0, sl
 8000842:	4298      	cmp	r0, r3
 8000844:	d9e7      	bls.n	8000816 <HAL_RCC_OscConfig+0x36a>
 8000846:	e696      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000848:	2b05      	cmp	r3, #5
 800084a:	6a23      	ldr	r3, [r4, #32]
 800084c:	d103      	bne.n	8000856 <HAL_RCC_OscConfig+0x3aa>
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6223      	str	r3, [r4, #32]
 8000854:	e792      	b.n	800077c <HAL_RCC_OscConfig+0x2d0>
 8000856:	f023 0301 	bic.w	r3, r3, #1
 800085a:	6223      	str	r3, [r4, #32]
 800085c:	6a23      	ldr	r3, [r4, #32]
 800085e:	f023 0304 	bic.w	r3, r3, #4
 8000862:	e78e      	b.n	8000782 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000864:	f7ff fcde 	bl	8000224 <HAL_GetTick>
 8000868:	f241 3388 	movw	r3, #5000	; 0x1388
 800086c:	eba0 000a 	sub.w	r0, r0, sl
 8000870:	4298      	cmp	r0, r3
 8000872:	d98e      	bls.n	8000792 <HAL_RCC_OscConfig+0x2e6>
 8000874:	e67f      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
 8000876:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800087a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800087c:	e790      	b.n	80007a0 <HAL_RCC_OscConfig+0x2f4>
 800087e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000882:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000884:	e7cd      	b.n	8000822 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000886:	4c41      	ldr	r4, [pc, #260]	; (800098c <HAL_RCC_OscConfig+0x4e0>)
 8000888:	6863      	ldr	r3, [r4, #4]
 800088a:	f003 030c 	and.w	r3, r3, #12
 800088e:	2b08      	cmp	r3, #8
 8000890:	f43f ae45 	beq.w	800051e <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000894:	2a02      	cmp	r2, #2
 8000896:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800089a:	d152      	bne.n	8000942 <HAL_RCC_OscConfig+0x496>
 800089c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008a0:	fab3 f383 	clz	r3, r3
 80008a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008b2:	f7ff fcb7 	bl	8000224 <HAL_GetTick>
 80008b6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008ba:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008bc:	2601      	movs	r6, #1
 80008be:	fa97 f3a7 	rbit	r3, r7
 80008c2:	6822      	ldr	r2, [r4, #0]
 80008c4:	fa97 f3a7 	rbit	r3, r7
 80008c8:	fab3 f383 	clz	r3, r3
 80008cc:	f003 031f 	and.w	r3, r3, #31
 80008d0:	fa06 f303 	lsl.w	r3, r6, r3
 80008d4:	4213      	tst	r3, r2
 80008d6:	d12d      	bne.n	8000934 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008d8:	6862      	ldr	r2, [r4, #4]
 80008da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80008dc:	6a29      	ldr	r1, [r5, #32]
 80008de:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80008e2:	430b      	orrs	r3, r1
 80008e4:	4313      	orrs	r3, r2
 80008e6:	6063      	str	r3, [r4, #4]
 80008e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ec:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80008f0:	fab3 f383 	clz	r3, r3
 80008f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000902:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000904:	f7ff fc8e 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000908:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800090a:	4607      	mov	r7, r0
 800090c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000910:	6822      	ldr	r2, [r4, #0]
 8000912:	fa95 f3a5 	rbit	r3, r5
 8000916:	fab3 f383 	clz	r3, r3
 800091a:	f003 031f 	and.w	r3, r3, #31
 800091e:	fa06 f303 	lsl.w	r3, r6, r3
 8000922:	4213      	tst	r3, r2
 8000924:	f47f add8 	bne.w	80004d8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000928:	f7ff fc7c 	bl	8000224 <HAL_GetTick>
 800092c:	1bc0      	subs	r0, r0, r7
 800092e:	2802      	cmp	r0, #2
 8000930:	d9ec      	bls.n	800090c <HAL_RCC_OscConfig+0x460>
 8000932:	e620      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000934:	f7ff fc76 	bl	8000224 <HAL_GetTick>
 8000938:	eba0 0008 	sub.w	r0, r0, r8
 800093c:	2802      	cmp	r0, #2
 800093e:	d9be      	bls.n	80008be <HAL_RCC_OscConfig+0x412>
 8000940:	e619      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
 8000942:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800094e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000958:	f7ff fc64 	bl	8000224 <HAL_GetTick>
 800095c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000960:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000962:	2601      	movs	r6, #1
 8000964:	fa95 f3a5 	rbit	r3, r5
 8000968:	6822      	ldr	r2, [r4, #0]
 800096a:	fa95 f3a5 	rbit	r3, r5
 800096e:	fab3 f383 	clz	r3, r3
 8000972:	f003 031f 	and.w	r3, r3, #31
 8000976:	fa06 f303 	lsl.w	r3, r6, r3
 800097a:	4213      	tst	r3, r2
 800097c:	f43f adac 	beq.w	80004d8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000980:	f7ff fc50 	bl	8000224 <HAL_GetTick>
 8000984:	1bc0      	subs	r0, r0, r7
 8000986:	2802      	cmp	r0, #2
 8000988:	d9ec      	bls.n	8000964 <HAL_RCC_OscConfig+0x4b8>
 800098a:	e5f4      	b.n	8000576 <HAL_RCC_OscConfig+0xca>
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000990:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000992:	4c13      	ldr	r4, [pc, #76]	; (80009e0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000994:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000996:	f001 030c 	and.w	r3, r1, #12
 800099a:	2b08      	cmp	r3, #8
 800099c:	d11e      	bne.n	80009dc <HAL_RCC_GetSysClockFreq+0x4c>
 800099e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009a2:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009a6:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009aa:	fab3 f383 	clz	r3, r3
 80009ae:	fa22 f303 	lsr.w	r3, r2, r3
 80009b2:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <HAL_RCC_GetSysClockFreq+0x54>)
 80009b4:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009b8:	220f      	movs	r2, #15
 80009ba:	fa92 f2a2 	rbit	r2, r2
 80009be:	fab2 f282 	clz	r2, r2
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	40d3      	lsrs	r3, r2
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_RCC_GetSysClockFreq+0x58>)
 80009ca:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80009cc:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009ce:	bf4a      	itet	mi
 80009d0:	4b06      	ldrmi	r3, [pc, #24]	; (80009ec <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009d2:	4b07      	ldrpl	r3, [pc, #28]	; (80009f0 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009d4:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009d8:	4358      	muls	r0, r3
 80009da:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009de:	bd10      	pop	{r4, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	08001370 	.word	0x08001370
 80009e8:	08001380 	.word	0x08001380
 80009ec:	007a1200 	.word	0x007a1200
 80009f0:	003d0900 	.word	0x003d0900

080009f4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009f4:	4a5c      	ldr	r2, [pc, #368]	; (8000b68 <HAL_RCC_ClockConfig+0x174>)
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	f003 0307 	and.w	r3, r3, #7
 80009fc:	428b      	cmp	r3, r1
{
 80009fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a02:	4606      	mov	r6, r0
 8000a04:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a06:	d330      	bcc.n	8000a6a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a08:	6832      	ldr	r2, [r6, #0]
 8000a0a:	0791      	lsls	r1, r2, #30
 8000a0c:	d43a      	bmi.n	8000a84 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a0e:	07d2      	lsls	r2, r2, #31
 8000a10:	d440      	bmi.n	8000a94 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a12:	4a55      	ldr	r2, [pc, #340]	; (8000b68 <HAL_RCC_ClockConfig+0x174>)
 8000a14:	6813      	ldr	r3, [r2, #0]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	429d      	cmp	r5, r3
 8000a1c:	f0c0 8092 	bcc.w	8000b44 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a20:	6832      	ldr	r2, [r6, #0]
 8000a22:	4c52      	ldr	r4, [pc, #328]	; (8000b6c <HAL_RCC_ClockConfig+0x178>)
 8000a24:	f012 0f04 	tst.w	r2, #4
 8000a28:	f040 8097 	bne.w	8000b5a <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a2c:	0713      	lsls	r3, r2, #28
 8000a2e:	d506      	bpl.n	8000a3e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a30:	6863      	ldr	r3, [r4, #4]
 8000a32:	6932      	ldr	r2, [r6, #16]
 8000a34:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a3c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a3e:	f7ff ffa7 	bl	8000990 <HAL_RCC_GetSysClockFreq>
 8000a42:	6863      	ldr	r3, [r4, #4]
 8000a44:	22f0      	movs	r2, #240	; 0xf0
 8000a46:	fa92 f2a2 	rbit	r2, r2
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a52:	40d3      	lsrs	r3, r2
 8000a54:	4a46      	ldr	r2, [pc, #280]	; (8000b70 <HAL_RCC_ClockConfig+0x17c>)
 8000a56:	5cd3      	ldrb	r3, [r2, r3]
 8000a58:	40d8      	lsrs	r0, r3
 8000a5a:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <HAL_RCC_ClockConfig+0x180>)
 8000a5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fbb2 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000a64:	2000      	movs	r0, #0
}
 8000a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a6a:	6813      	ldr	r3, [r2, #0]
 8000a6c:	f023 0307 	bic.w	r3, r3, #7
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a74:	6813      	ldr	r3, [r2, #0]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d0c4      	beq.n	8000a08 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
 8000a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a84:	4939      	ldr	r1, [pc, #228]	; (8000b6c <HAL_RCC_ClockConfig+0x178>)
 8000a86:	68b0      	ldr	r0, [r6, #8]
 8000a88:	684b      	ldr	r3, [r1, #4]
 8000a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a8e:	4303      	orrs	r3, r0
 8000a90:	604b      	str	r3, [r1, #4]
 8000a92:	e7bc      	b.n	8000a0e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a94:	6872      	ldr	r2, [r6, #4]
 8000a96:	4c35      	ldr	r4, [pc, #212]	; (8000b6c <HAL_RCC_ClockConfig+0x178>)
 8000a98:	2a01      	cmp	r2, #1
 8000a9a:	d128      	bne.n	8000aee <HAL_RCC_ClockConfig+0xfa>
 8000a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aa0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aa4:	6821      	ldr	r1, [r4, #0]
 8000aa6:	fa93 f3a3 	rbit	r3, r3
 8000aaa:	fab3 f383 	clz	r3, r3
 8000aae:	f003 031f 	and.w	r3, r3, #31
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab8:	d0e1      	beq.n	8000a7e <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aba:	6863      	ldr	r3, [r4, #4]
 8000abc:	f023 0303 	bic.w	r3, r3, #3
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000ac4:	f7ff fbae 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ac8:	6873      	ldr	r3, [r6, #4]
 8000aca:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000acc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ace:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ad2:	d11f      	bne.n	8000b14 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ad4:	6863      	ldr	r3, [r4, #4]
 8000ad6:	f003 030c 	and.w	r3, r3, #12
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d099      	beq.n	8000a12 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ade:	f7ff fba1 	bl	8000224 <HAL_GetTick>
 8000ae2:	1bc0      	subs	r0, r0, r7
 8000ae4:	4540      	cmp	r0, r8
 8000ae6:	d9f5      	bls.n	8000ad4 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000ae8:	2003      	movs	r0, #3
 8000aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000aee:	2a02      	cmp	r2, #2
 8000af0:	bf0c      	ite	eq
 8000af2:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000af6:	2302      	movne	r3, #2
 8000af8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000afc:	6820      	ldr	r0, [r4, #0]
 8000afe:	fa93 f3a3 	rbit	r3, r3
 8000b02:	fab3 f383 	clz	r3, r3
 8000b06:	f003 031f 	and.w	r3, r3, #31
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b10:	4203      	tst	r3, r0
 8000b12:	e7d1      	b.n	8000ab8 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d110      	bne.n	8000b3a <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b18:	6863      	ldr	r3, [r4, #4]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	f43f af77 	beq.w	8000a12 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b24:	f7ff fb7e 	bl	8000224 <HAL_GetTick>
 8000b28:	1bc0      	subs	r0, r0, r7
 8000b2a:	4540      	cmp	r0, r8
 8000b2c:	d9f4      	bls.n	8000b18 <HAL_RCC_ClockConfig+0x124>
 8000b2e:	e7db      	b.n	8000ae8 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b30:	f7ff fb78 	bl	8000224 <HAL_GetTick>
 8000b34:	1bc0      	subs	r0, r0, r7
 8000b36:	4540      	cmp	r0, r8
 8000b38:	d8d6      	bhi.n	8000ae8 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b3a:	6863      	ldr	r3, [r4, #4]
 8000b3c:	f013 0f0c 	tst.w	r3, #12
 8000b40:	d1f6      	bne.n	8000b30 <HAL_RCC_ClockConfig+0x13c>
 8000b42:	e766      	b.n	8000a12 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b44:	6813      	ldr	r3, [r2, #0]
 8000b46:	f023 0307 	bic.w	r3, r3, #7
 8000b4a:	432b      	orrs	r3, r5
 8000b4c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b4e:	6813      	ldr	r3, [r2, #0]
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	429d      	cmp	r5, r3
 8000b56:	d192      	bne.n	8000a7e <HAL_RCC_ClockConfig+0x8a>
 8000b58:	e762      	b.n	8000a20 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b5a:	6863      	ldr	r3, [r4, #4]
 8000b5c:	68f1      	ldr	r1, [r6, #12]
 8000b5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b62:	430b      	orrs	r3, r1
 8000b64:	6063      	str	r3, [r4, #4]
 8000b66:	e761      	b.n	8000a2c <HAL_RCC_ClockConfig+0x38>
 8000b68:	40022000 	.word	0x40022000
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	08001390 	.word	0x08001390
 8000b74:	20000000 	.word	0x20000000

08000b78 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000b78:	4b01      	ldr	r3, [pc, #4]	; (8000b80 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000000 	.word	0x20000000

08000b84 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000b84:	6803      	ldr	r3, [r0, #0]
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	f042 0201 	orr.w	r2, r2, #1
 8000b8c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	f042 0201 	orr.w	r2, r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000b96:	2000      	movs	r0, #0
 8000b98:	4770      	bx	lr

08000b9a <HAL_TIM_OC_DelayElapsedCallback>:
 8000b9a:	4770      	bx	lr

08000b9c <HAL_TIM_IC_CaptureCallback>:
 8000b9c:	4770      	bx	lr

08000b9e <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_TIM_TriggerCallback>:
 8000ba0:	4770      	bx	lr

08000ba2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ba2:	6803      	ldr	r3, [r0, #0]
 8000ba4:	691a      	ldr	r2, [r3, #16]
 8000ba6:	0791      	lsls	r1, r2, #30
{
 8000ba8:	b510      	push	{r4, lr}
 8000baa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000bac:	d50f      	bpl.n	8000bce <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	0792      	lsls	r2, r2, #30
 8000bb2:	d50c      	bpl.n	8000bce <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000bb4:	f06f 0202 	mvn.w	r2, #2
 8000bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bba:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000bbc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bbe:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000bc0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bc2:	f000 8085 	beq.w	8000cd0 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000bc6:	f7ff ffe9 	bl	8000b9c <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	691a      	ldr	r2, [r3, #16]
 8000bd2:	0752      	lsls	r2, r2, #29
 8000bd4:	d510      	bpl.n	8000bf8 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	0750      	lsls	r0, r2, #29
 8000bda:	d50d      	bpl.n	8000bf8 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000bdc:	f06f 0204 	mvn.w	r2, #4
 8000be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000be2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000be4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000be6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bea:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000bec:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bee:	d075      	beq.n	8000cdc <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bf0:	f7ff ffd4 	bl	8000b9c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	691a      	ldr	r2, [r3, #16]
 8000bfc:	0711      	lsls	r1, r2, #28
 8000bfe:	d50f      	bpl.n	8000c20 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	0712      	lsls	r2, r2, #28
 8000c04:	d50c      	bpl.n	8000c20 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000c06:	f06f 0208 	mvn.w	r2, #8
 8000c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c0c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c0e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c10:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c12:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c14:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c16:	d067      	beq.n	8000ce8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c18:	f7ff ffc0 	bl	8000b9c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000c20:	6823      	ldr	r3, [r4, #0]
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	06d0      	lsls	r0, r2, #27
 8000c26:	d510      	bpl.n	8000c4a <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	06d1      	lsls	r1, r2, #27
 8000c2c:	d50d      	bpl.n	8000c4a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000c2e:	f06f 0210 	mvn.w	r2, #16
 8000c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c34:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c36:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c38:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c3c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c3e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c40:	d058      	beq.n	8000cf4 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c42:	f7ff ffab 	bl	8000b9c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c46:	2300      	movs	r3, #0
 8000c48:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	691a      	ldr	r2, [r3, #16]
 8000c4e:	07d2      	lsls	r2, r2, #31
 8000c50:	d508      	bpl.n	8000c64 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	07d0      	lsls	r0, r2, #31
 8000c56:	d505      	bpl.n	8000c64 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000c58:	f06f 0201 	mvn.w	r2, #1
 8000c5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f000 fa60 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	691a      	ldr	r2, [r3, #16]
 8000c68:	0611      	lsls	r1, r2, #24
 8000c6a:	d508      	bpl.n	8000c7e <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c6c:	68da      	ldr	r2, [r3, #12]
 8000c6e:	0612      	lsls	r2, r2, #24
 8000c70:	d505      	bpl.n	8000c7e <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8000c72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000c76:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f000 f98a 	bl	8000f92 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	691a      	ldr	r2, [r3, #16]
 8000c82:	05d0      	lsls	r0, r2, #23
 8000c84:	d508      	bpl.n	8000c98 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	0611      	lsls	r1, r2, #24
 8000c8a:	d505      	bpl.n	8000c98 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000c8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000c90:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8000c92:	4620      	mov	r0, r4
 8000c94:	f000 f97e 	bl	8000f94 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	0652      	lsls	r2, r2, #25
 8000c9e:	d508      	bpl.n	8000cb2 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	0650      	lsls	r0, r2, #25
 8000ca4:	d505      	bpl.n	8000cb2 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8000ca6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000caa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000cac:	4620      	mov	r0, r4
 8000cae:	f7ff ff77 	bl	8000ba0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	691a      	ldr	r2, [r3, #16]
 8000cb6:	0691      	lsls	r1, r2, #26
 8000cb8:	d522      	bpl.n	8000d00 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	0692      	lsls	r2, r2, #26
 8000cbe:	d51f      	bpl.n	8000d00 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000cc0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000cc4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000cc6:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000ccc:	f000 b960 	b.w	8000f90 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cd0:	f7ff ff63 	bl	8000b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f7ff ff62 	bl	8000b9e <HAL_TIM_PWM_PulseFinishedCallback>
 8000cda:	e776      	b.n	8000bca <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cdc:	f7ff ff5d 	bl	8000b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	f7ff ff5c 	bl	8000b9e <HAL_TIM_PWM_PulseFinishedCallback>
 8000ce6:	e785      	b.n	8000bf4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ce8:	f7ff ff57 	bl	8000b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000cec:	4620      	mov	r0, r4
 8000cee:	f7ff ff56 	bl	8000b9e <HAL_TIM_PWM_PulseFinishedCallback>
 8000cf2:	e793      	b.n	8000c1c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cf4:	f7ff ff51 	bl	8000b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff ff50 	bl	8000b9e <HAL_TIM_PWM_PulseFinishedCallback>
 8000cfe:	e7a2      	b.n	8000c46 <HAL_TIM_IRQHandler+0xa4>
 8000d00:	bd10      	pop	{r4, pc}
	...

08000d04 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d04:	4a21      	ldr	r2, [pc, #132]	; (8000d8c <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8000d06:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d08:	4290      	cmp	r0, r2
{
 8000d0a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d0c:	d005      	beq.n	8000d1a <TIM_Base_SetConfig+0x16>
 8000d0e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d12:	d002      	beq.n	8000d1a <TIM_Base_SetConfig+0x16>
 8000d14:	4c1e      	ldr	r4, [pc, #120]	; (8000d90 <TIM_Base_SetConfig+0x8c>)
 8000d16:	42a0      	cmp	r0, r4
 8000d18:	d10c      	bne.n	8000d34 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000d1a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d20:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000d22:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d26:	d010      	beq.n	8000d4a <TIM_Base_SetConfig+0x46>
 8000d28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d2c:	d00d      	beq.n	8000d4a <TIM_Base_SetConfig+0x46>
 8000d2e:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <TIM_Base_SetConfig+0x8c>)
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d00a      	beq.n	8000d4a <TIM_Base_SetConfig+0x46>
 8000d34:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <TIM_Base_SetConfig+0x90>)
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d007      	beq.n	8000d4a <TIM_Base_SetConfig+0x46>
 8000d3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	d003      	beq.n	8000d4a <TIM_Base_SetConfig+0x46>
 8000d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d103      	bne.n	8000d52 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d4a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d50:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d52:	694a      	ldr	r2, [r1, #20]
 8000d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d58:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000d5a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d5c:	688b      	ldr	r3, [r1, #8]
 8000d5e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d60:	680b      	ldr	r3, [r1, #0]
 8000d62:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <TIM_Base_SetConfig+0x88>)
 8000d66:	4298      	cmp	r0, r3
 8000d68:	d00b      	beq.n	8000d82 <TIM_Base_SetConfig+0x7e>
 8000d6a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d007      	beq.n	8000d82 <TIM_Base_SetConfig+0x7e>
 8000d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d76:	4298      	cmp	r0, r3
 8000d78:	d003      	beq.n	8000d82 <TIM_Base_SetConfig+0x7e>
 8000d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d101      	bne.n	8000d86 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d82:	690b      	ldr	r3, [r1, #16]
 8000d84:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000d86:	2301      	movs	r3, #1
 8000d88:	6143      	str	r3, [r0, #20]
 8000d8a:	bd10      	pop	{r4, pc}
 8000d8c:	40012c00 	.word	0x40012c00
 8000d90:	40000400 	.word	0x40000400
 8000d94:	40014000 	.word	0x40014000

08000d98 <HAL_TIM_Base_Init>:
{ 
 8000d98:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	b1a0      	cbz	r0, 8000dc8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000da2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000da6:	b91b      	cbnz	r3, 8000db0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000da8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000dac:	f000 fa0a 	bl	80011c4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000db6:	6820      	ldr	r0, [r4, #0]
 8000db8:	1d21      	adds	r1, r4, #4
 8000dba:	f7ff ffa3 	bl	8000d04 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000dc8:	2001      	movs	r0, #1
}
 8000dca:	bd10      	pop	{r4, pc}

08000dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000dcc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000dce:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000dd0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dd2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000dd6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000dda:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000ddc:	6083      	str	r3, [r0, #8]
 8000dde:	bd10      	pop	{r4, pc}

08000de0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000de0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000de4:	2b01      	cmp	r3, #1
{
 8000de6:	b570      	push	{r4, r5, r6, lr}
 8000de8:	4604      	mov	r4, r0
 8000dea:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000dee:	d01a      	beq.n	8000e26 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8000df0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000df4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8000df6:	2301      	movs	r3, #1
 8000df8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000dfc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dfe:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <HAL_TIM_ConfigClockSource+0x168>)
 8000e00:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000e02:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000e04:	680b      	ldr	r3, [r1, #0]
 8000e06:	2b40      	cmp	r3, #64	; 0x40
 8000e08:	d075      	beq.n	8000ef6 <HAL_TIM_ConfigClockSource+0x116>
 8000e0a:	d818      	bhi.n	8000e3e <HAL_TIM_ConfigClockSource+0x5e>
 8000e0c:	2b10      	cmp	r3, #16
 8000e0e:	f000 808f 	beq.w	8000f30 <HAL_TIM_ConfigClockSource+0x150>
 8000e12:	d809      	bhi.n	8000e28 <HAL_TIM_ConfigClockSource+0x48>
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 8085 	beq.w	8000f24 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8000e1a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000e1c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000e22:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000e28:	2b20      	cmp	r3, #32
 8000e2a:	f000 8087 	beq.w	8000f3c <HAL_TIM_ConfigClockSource+0x15c>
 8000e2e:	2b30      	cmp	r3, #48	; 0x30
 8000e30:	d1f3      	bne.n	8000e1a <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8000e32:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e38:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8000e3c:	e033      	b.n	8000ea6 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8000e3e:	2b70      	cmp	r3, #112	; 0x70
 8000e40:	d033      	beq.n	8000eaa <HAL_TIM_ConfigClockSource+0xca>
 8000e42:	d81b      	bhi.n	8000e7c <HAL_TIM_ConfigClockSource+0x9c>
 8000e44:	2b50      	cmp	r3, #80	; 0x50
 8000e46:	d03f      	beq.n	8000ec8 <HAL_TIM_ConfigClockSource+0xe8>
 8000e48:	2b60      	cmp	r3, #96	; 0x60
 8000e4a:	d1e6      	bne.n	8000e1a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000e4c:	684d      	ldr	r5, [r1, #4]
 8000e4e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e50:	6a01      	ldr	r1, [r0, #32]
 8000e52:	f021 0110 	bic.w	r1, r1, #16
 8000e56:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e58:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8000e5a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e5c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e68:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000e6c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000e6e:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000e70:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e76:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8000e7a:	e014      	b.n	8000ea6 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8000e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e80:	d00c      	beq.n	8000e9c <HAL_TIM_ConfigClockSource+0xbc>
 8000e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e86:	d1c8      	bne.n	8000e1a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8000e88:	68cb      	ldr	r3, [r1, #12]
 8000e8a:	684a      	ldr	r2, [r1, #4]
 8000e8c:	6889      	ldr	r1, [r1, #8]
 8000e8e:	f7ff ff9d 	bl	8000dcc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000e92:	6822      	ldr	r2, [r4, #0]
 8000e94:	6893      	ldr	r3, [r2, #8]
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9a:	e013      	b.n	8000ec4 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000e9c:	6883      	ldr	r3, [r0, #8]
 8000e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea2:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8000ea6:	6083      	str	r3, [r0, #8]
 8000ea8:	e7b7      	b.n	8000e1a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8000eaa:	68cb      	ldr	r3, [r1, #12]
 8000eac:	684a      	ldr	r2, [r1, #4]
 8000eae:	6889      	ldr	r1, [r1, #8]
 8000eb0:	f7ff ff8c 	bl	8000dcc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000eb4:	6822      	ldr	r2, [r4, #0]
 8000eb6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ec4:	6093      	str	r3, [r2, #8]
    break;
 8000ec6:	e7a8      	b.n	8000e1a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000ec8:	684a      	ldr	r2, [r1, #4]
 8000eca:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ecc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ece:	6a05      	ldr	r5, [r0, #32]
 8000ed0:	f025 0501 	bic.w	r5, r5, #1
 8000ed4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000ed6:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ed8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000edc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ee0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000ee4:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000ee6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000ee8:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000eea:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ef0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8000ef4:	e7d7      	b.n	8000ea6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000ef6:	684a      	ldr	r2, [r1, #4]
 8000ef8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000efa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000efc:	6a05      	ldr	r5, [r0, #32]
 8000efe:	f025 0501 	bic.w	r5, r5, #1
 8000f02:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f04:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f06:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f0e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000f12:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000f14:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f16:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000f18:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f1e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8000f22:	e7c0      	b.n	8000ea6 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000f24:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f2a:	f043 0307 	orr.w	r3, r3, #7
 8000f2e:	e7ba      	b.n	8000ea6 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000f30:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f36:	f043 0317 	orr.w	r3, r3, #23
 8000f3a:	e7b4      	b.n	8000ea6 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000f3c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f42:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8000f46:	e7ae      	b.n	8000ea6 <HAL_TIM_ConfigClockSource+0xc6>
 8000f48:	fffe0088 	.word	0xfffe0088

08000f4c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8000f4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f50:	2b01      	cmp	r3, #1
{
 8000f52:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000f54:	d018      	beq.n	8000f88 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000f56:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000f58:	4d0c      	ldr	r5, [pc, #48]	; (8000f8c <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8000f5a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8000f5c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000f5e:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000f60:	bf02      	ittt	eq
 8000f62:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8000f64:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000f68:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000f6a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000f6c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000f72:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000f74:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000f78:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000f7a:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8000f7c:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8000f7e:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8000f80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8000f84:	4618      	mov	r0, r3
 8000f86:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8000f88:	2002      	movs	r0, #2
} 
 8000f8a:	bd30      	pop	{r4, r5, pc}
 8000f8c:	40012c00 	.word	0x40012c00

08000f90 <HAL_TIMEx_CommutationCallback>:
 8000f90:	4770      	bx	lr

08000f92 <HAL_TIMEx_BreakCallback>:
 8000f92:	4770      	bx	lr

08000f94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8000f94:	4770      	bx	lr

08000f96 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f96:	b510      	push	{r4, lr}
 8000f98:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa2:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000faa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fae:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb0:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000fb2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f7ff fa7a 	bl	80004ac <HAL_RCC_OscConfig>
 8000fb8:	4601      	mov	r1, r0
 8000fba:	b100      	cbz	r0, 8000fbe <SystemClock_Config+0x28>
 8000fbc:	e7fe      	b.n	8000fbc <SystemClock_Config+0x26>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fc4:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fcc:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fce:	f7ff fd11 	bl	80009f4 <HAL_RCC_ClockConfig>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	b100      	cbz	r0, 8000fd8 <SystemClock_Config+0x42>
 8000fd6:	e7fe      	b.n	8000fd6 <SystemClock_Config+0x40>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000fd8:	f7ff fdce 	bl	8000b78 <HAL_RCC_GetHCLKFreq>
 8000fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fe4:	f7ff f976 	bl	80002d4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000fe8:	2004      	movs	r0, #4
 8000fea:	f7ff f989 	bl	8000300 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fee:	4622      	mov	r2, r4
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff6:	f7ff f92d 	bl	8000254 <HAL_NVIC_SetPriority>
}
 8000ffa:	b010      	add	sp, #64	; 0x40
 8000ffc:	bd10      	pop	{r4, pc}
	...

08001000 <main>:
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8001004:	f7ff f8f4 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8001008:	f7ff ffc5 	bl	8000f96 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100c:	4b41      	ldr	r3, [pc, #260]	; (8001114 <main+0x114>)
  htim2.Instance = TIM2;
 800100e:	4d42      	ldr	r5, [pc, #264]	; (8001118 <main+0x118>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001010:	695a      	ldr	r2, [r3, #20]
 8001012:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	695a      	ldr	r2, [r3, #20]
 800101a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800101e:	9201      	str	r2, [sp, #4]
 8001020:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001030:	9202      	str	r2, [sp, #8]
 8001032:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001046:	2121      	movs	r1, #33	; 0x21
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 800104e:	f7ff fa23 	bl	8000498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001052:	2321      	movs	r3, #33	; 0x21
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001056:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f7ff f95d 	bl	8000324 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800106a:	f248 0304 	movw	r3, #32772	; 0x8004
 800106e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107c:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001080:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Init.Prescaler = 15999;
 8001084:	f643 677f 	movw	r7, #15999	; 0x3e7f
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f7ff f94c 	bl	8000324 <HAL_GPIO_Init>
  htim2.Init.Prescaler = 15999;
 800108c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001090:	e885 0088 	stmia.w	r5, {r3, r7}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001094:	4628      	mov	r0, r5
  htim2.Init.Period = 499;
 8001096:	f240 13f3 	movw	r3, #499	; 0x1f3
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 499;
 800109c:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a2:	f7ff fe79 	bl	8000d98 <HAL_TIM_Base_Init>
 80010a6:	b100      	cbz	r0, 80010aa <main+0xaa>
 80010a8:	e7fe      	b.n	80010a8 <main+0xa8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010aa:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ae:	a907      	add	r1, sp, #28
 80010b0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b2:	9607      	str	r6, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b4:	f7ff fe94 	bl	8000de0 <HAL_TIM_ConfigClockSource>
 80010b8:	b100      	cbz	r0, 80010bc <main+0xbc>
 80010ba:	e7fe      	b.n	80010ba <main+0xba>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c0:	a904      	add	r1, sp, #16
 80010c2:	4628      	mov	r0, r5
 80010c4:	f7ff ff42 	bl	8000f4c <HAL_TIMEx_MasterConfigSynchronization>
 80010c8:	b100      	cbz	r0, 80010cc <main+0xcc>
 80010ca:	e7fe      	b.n	80010ca <main+0xca>
  htim3.Instance = TIM3;
 80010cc:	4c13      	ldr	r4, [pc, #76]	; (800111c <main+0x11c>)
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <main+0x120>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 15999;
 80010d2:	e884 0088 	stmia.w	r4, {r3, r7}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	6120      	str	r0, [r4, #16]
  htim3.Init.Period = 249;
 80010d8:	23f9      	movs	r3, #249	; 0xf9
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010dc:	4620      	mov	r0, r4
  htim3.Init.Period = 249;
 80010de:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010e0:	f7ff fe5a 	bl	8000d98 <HAL_TIM_Base_Init>
 80010e4:	b100      	cbz	r0, 80010e8 <main+0xe8>
 80010e6:	e7fe      	b.n	80010e6 <main+0xe6>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e8:	a907      	add	r1, sp, #28
 80010ea:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ec:	9607      	str	r6, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ee:	f7ff fe77 	bl	8000de0 <HAL_TIM_ConfigClockSource>
 80010f2:	b100      	cbz	r0, 80010f6 <main+0xf6>
 80010f4:	e7fe      	b.n	80010f4 <main+0xf4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010fa:	a904      	add	r1, sp, #16
 80010fc:	4620      	mov	r0, r4
 80010fe:	f7ff ff25 	bl	8000f4c <HAL_TIMEx_MasterConfigSynchronization>
 8001102:	b100      	cbz	r0, 8001106 <main+0x106>
 8001104:	e7fe      	b.n	8001104 <main+0x104>
  HAL_TIM_Base_Start_IT(&htim2);
 8001106:	4628      	mov	r0, r5
 8001108:	f7ff fd3c 	bl	8000b84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800110c:	4620      	mov	r0, r4
 800110e:	f7ff fd39 	bl	8000b84 <HAL_TIM_Base_Start_IT>
 8001112:	e7fe      	b.n	8001112 <main+0x112>
 8001114:	40021000 	.word	0x40021000
 8001118:	20000064 	.word	0x20000064
 800111c:	20000024 	.word	0x20000024
 8001120:	40000400 	.word	0x40000400

08001124 <HAL_TIM_PeriodElapsedCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
	if(htim->Instance == TIM2){
 8001124:	6803      	ldr	r3, [r0, #0]
 8001126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800112a:	d104      	bne.n	8001136 <HAL_TIM_PeriodElapsedCallback+0x12>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_0);
 800112c:	2101      	movs	r1, #1
	}else if(htim->Instance ==TIM3){
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f7ff b9b6 	b.w	80004a2 <HAL_GPIO_TogglePin>
	}else if(htim->Instance ==TIM3){
 8001136:	4a03      	ldr	r2, [pc, #12]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d101      	bne.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800113c:	2120      	movs	r1, #32
 800113e:	e7f6      	b.n	800112e <HAL_TIM_PeriodElapsedCallback+0xa>
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40000400 	.word	0x40000400

08001148 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_MspInit+0x78>)
{
 800114a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114c:	699a      	ldr	r2, [r3, #24]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	619a      	str	r2, [r3, #24]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	f7ff f866 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	4611      	mov	r1, r2
 8001168:	f06f 000b 	mvn.w	r0, #11
 800116c:	f7ff f872 	bl	8000254 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	4611      	mov	r1, r2
 8001174:	f06f 000a 	mvn.w	r0, #10
 8001178:	f7ff f86c 	bl	8000254 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	4611      	mov	r1, r2
 8001180:	f06f 0009 	mvn.w	r0, #9
 8001184:	f7ff f866 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	4611      	mov	r1, r2
 800118c:	f06f 0004 	mvn.w	r0, #4
 8001190:	f7ff f860 	bl	8000254 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	4611      	mov	r1, r2
 8001198:	f06f 0003 	mvn.w	r0, #3
 800119c:	f7ff f85a 	bl	8000254 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	4611      	mov	r1, r2
 80011a4:	f06f 0001 	mvn.w	r0, #1
 80011a8:	f7ff f854 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	4611      	mov	r1, r2
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f7ff f84e 	bl	8000254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b8:	b003      	add	sp, #12
 80011ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80011c4:	6803      	ldr	r3, [r0, #0]
 80011c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80011ca:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80011cc:	d115      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d2:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011d4:	69da      	ldr	r2, [r3, #28]
 80011d6:	f042 0201 	orr.w	r2, r2, #1
 80011da:	61da      	str	r2, [r3, #28]
 80011dc:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011e6:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ea:	f7ff f833 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ee:	201c      	movs	r0, #28
  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011f0:	f7ff f864 	bl	80002bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011f4:	b003      	add	sp, #12
 80011f6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_TIM_Base_MspInit+0x60>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d1f9      	bne.n	80011f4 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_TIM_Base_MspInit+0x64>)
 8001202:	69da      	ldr	r2, [r3, #28]
 8001204:	f042 0202 	orr.w	r2, r2, #2
 8001208:	61da      	str	r2, [r3, #28]
 800120a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001214:	201d      	movs	r0, #29
 8001216:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001218:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800121a:	f7ff f81b 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800121e:	201d      	movs	r0, #29
 8001220:	e7e6      	b.n	80011f0 <HAL_TIM_Base_MspInit+0x2c>
 8001222:	bf00      	nop
 8001224:	40000400 	.word	0x40000400
 8001228:	40021000 	.word	0x40021000

0800122c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800122c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122e:	f7fe fff1 	bl	8000214 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001236:	f7ff b870 	b.w	800031a <HAL_SYSTICK_IRQHandler>
	...

0800123c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800123c:	4801      	ldr	r0, [pc, #4]	; (8001244 <TIM2_IRQHandler+0x8>)
 800123e:	f7ff bcb0 	b.w	8000ba2 <HAL_TIM_IRQHandler>
 8001242:	bf00      	nop
 8001244:	20000064 	.word	0x20000064

08001248 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001248:	4801      	ldr	r0, [pc, #4]	; (8001250 <TIM3_IRQHandler+0x8>)
 800124a:	f7ff bcaa 	b.w	8000ba2 <HAL_TIM_IRQHandler>
 800124e:	bf00      	nop
 8001250:	20000024 	.word	0x20000024

08001254 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4915      	ldr	r1, [pc, #84]	; (80012ac <SystemInit+0x58>)
 8001256:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800125a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <SystemInit+0x5c>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800126c:	6858      	ldr	r0, [r3, #4]
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <SystemInit+0x60>)
 8001270:	4002      	ands	r2, r0
 8001272:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800127a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800127e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001286:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800128e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001292:	f022 020f 	bic.w	r2, r2, #15
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001298:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <SystemInit+0x64>)
 800129c:	4002      	ands	r2, r0
 800129e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012a8:	608b      	str	r3, [r1, #8]
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	f87fc00c 	.word	0xf87fc00c
 80012b8:	ff00fccc 	.word	0xff00fccc

080012bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012c2:	e003      	b.n	80012cc <LoopCopyDataInit>

080012c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ca:	3104      	adds	r1, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012d4:	d3f6      	bcc.n	80012c4 <CopyDataInit>
	ldr	r2, =_sbss
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012d8:	e002      	b.n	80012e0 <LoopFillZerobss>

080012da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012dc:	f842 3b04 	str.w	r3, [r2], #4

080012e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <LoopForever+0x16>)
	cmp	r2, r3
 80012e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012e4:	d3f9      	bcc.n	80012da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012e6:	f7ff ffb5 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f000 f811 	bl	8001310 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ee:	f7ff fe87 	bl	8001000 <main>

080012f2 <LoopForever>:

LoopForever:
    b LoopForever
 80012f2:	e7fe      	b.n	80012f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80012f8:	080013a8 	.word	0x080013a8
	ldr	r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001300:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001304:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001308:	200000a4 	.word	0x200000a4

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <__libc_init_array>:
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	4e0d      	ldr	r6, [pc, #52]	; (8001348 <__libc_init_array+0x38>)
 8001314:	4c0d      	ldr	r4, [pc, #52]	; (800134c <__libc_init_array+0x3c>)
 8001316:	1ba4      	subs	r4, r4, r6
 8001318:	10a4      	asrs	r4, r4, #2
 800131a:	2500      	movs	r5, #0
 800131c:	42a5      	cmp	r5, r4
 800131e:	d109      	bne.n	8001334 <__libc_init_array+0x24>
 8001320:	4e0b      	ldr	r6, [pc, #44]	; (8001350 <__libc_init_array+0x40>)
 8001322:	4c0c      	ldr	r4, [pc, #48]	; (8001354 <__libc_init_array+0x44>)
 8001324:	f000 f818 	bl	8001358 <_init>
 8001328:	1ba4      	subs	r4, r4, r6
 800132a:	10a4      	asrs	r4, r4, #2
 800132c:	2500      	movs	r5, #0
 800132e:	42a5      	cmp	r5, r4
 8001330:	d105      	bne.n	800133e <__libc_init_array+0x2e>
 8001332:	bd70      	pop	{r4, r5, r6, pc}
 8001334:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001338:	4798      	blx	r3
 800133a:	3501      	adds	r5, #1
 800133c:	e7ee      	b.n	800131c <__libc_init_array+0xc>
 800133e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001342:	4798      	blx	r3
 8001344:	3501      	adds	r5, #1
 8001346:	e7f2      	b.n	800132e <__libc_init_array+0x1e>
 8001348:	080013a0 	.word	0x080013a0
 800134c:	080013a0 	.word	0x080013a0
 8001350:	080013a0 	.word	0x080013a0
 8001354:	080013a4 	.word	0x080013a4

08001358 <_init>:
 8001358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135a:	bf00      	nop
 800135c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800135e:	bc08      	pop	{r3}
 8001360:	469e      	mov	lr, r3
 8001362:	4770      	bx	lr

08001364 <_fini>:
 8001364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001366:	bf00      	nop
 8001368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800136a:	bc08      	pop	{r3}
 800136c:	469e      	mov	lr, r3
 800136e:	4770      	bx	lr
