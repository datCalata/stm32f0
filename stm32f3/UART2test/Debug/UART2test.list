
UART2test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001780  08001780  00011780  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080017d8  080017d8  000117d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017dc  080017dc  000117dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080017e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          000000d4  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000e4  200000e4  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d63f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001d3e  00000000  00000000  0002d67f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002f34  00000000  00000000  0002f3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000578  00000000  00000000  000322f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000808  00000000  00000000  00032870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000380b  00000000  00000000  00033078  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002360  00000000  00000000  00036883  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00038be3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000d94  00000000  00000000  00038c60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001768 	.word	0x08001768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001768 	.word	0x08001768

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f88c 	bl	80002f4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f846 	bl	8000274 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	2000000c 	.word	0x2000000c

080001f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4a07      	ldr	r2, [pc, #28]	; (8000210 <HAL_Init+0x20>)
{
 80001f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 f827 	bl	8000250 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffe0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000208:	f001 f988 	bl	800151c <HAL_MspInit>
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40022000 	.word	0x40022000

08000214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	2000002c 	.word	0x2000002c

08000224 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	2000002c 	.word	0x2000002c

08000230 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000232:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000234:	f7ff fff6 	bl	8000224 <HAL_GetTick>
  uint32_t wait = Delay;
 8000238:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800023a:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800023c:	4605      	mov	r5, r0
  {
     wait++;
 800023e:	bf18      	it	ne
 8000240:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000242:	f7ff ffef 	bl	8000224 <HAL_GetTick>
 8000246:	1b40      	subs	r0, r0, r5
 8000248:	42a0      	cmp	r0, r4
 800024a:	d3fa      	bcc.n	8000242 <HAL_Delay+0x12>
  {
  }
}
 800024c:	b003      	add	sp, #12
 800024e:	bd30      	pop	{r4, r5, pc}

08000250 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000252:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000254:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000258:	041b      	lsls	r3, r3, #16
 800025a:	0c1b      	lsrs	r3, r3, #16
 800025c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000260:	0200      	lsls	r0, r0, #8
 8000262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000266:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800026a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800026c:	60d3      	str	r3, [r2, #12]
 800026e:	4770      	bx	lr
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000276:	b530      	push	{r4, r5, lr}
 8000278:	68dc      	ldr	r4, [r3, #12]
 800027a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800027e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000282:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000284:	2b04      	cmp	r3, #4
 8000286:	bf28      	it	cs
 8000288:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028c:	f04f 0501 	mov.w	r5, #1
 8000290:	fa05 f303 	lsl.w	r3, r5, r3
 8000294:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000298:	bf8c      	ite	hi
 800029a:	3c03      	subhi	r4, #3
 800029c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029e:	4019      	ands	r1, r3
 80002a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002a2:	fa05 f404 	lsl.w	r4, r5, r4
 80002a6:	3c01      	subs	r4, #1
 80002a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ac:	ea42 0201 	orr.w	r2, r2, r1
 80002b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	bfaf      	iteee	ge
 80002b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	f000 000f 	andlt.w	r0, r0, #15
 80002be:	4b06      	ldrlt	r3, [pc, #24]	; (80002d8 <HAL_NVIC_SetPriority+0x64>)
 80002c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	bfa5      	ittet	ge
 80002c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002d0:	bd30      	pop	{r4, r5, pc}
 80002d2:	bf00      	nop
 80002d4:	e000ed00 	.word	0xe000ed00
 80002d8:	e000ed14 	.word	0xe000ed14

080002dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002dc:	0942      	lsrs	r2, r0, #5
 80002de:	2301      	movs	r3, #1
 80002e0:	f000 001f 	and.w	r0, r0, #31
 80002e4:	fa03 f000 	lsl.w	r0, r3, r0
 80002e8:	4b01      	ldr	r3, [pc, #4]	; (80002f0 <HAL_NVIC_EnableIRQ+0x14>)
 80002ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ee:	4770      	bx	lr
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002f4:	3801      	subs	r0, #1
 80002f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002fa:	d20a      	bcs.n	8000312 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	4a07      	ldr	r2, [pc, #28]	; (800031c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000300:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000302:	21f0      	movs	r1, #240	; 0xf0
 8000304:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000308:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800030a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800030c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000312:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000e010 	.word	0xe000e010
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000322:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000324:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000326:	bf0c      	ite	eq
 8000328:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800032c:	f022 0204 	bicne.w	r2, r2, #4
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	4770      	bx	lr
 8000334:	e000e010 	.word	0xe000e010

08000338 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000338:	4770      	bx	lr

0800033a <HAL_SYSTICK_IRQHandler>:
{
 800033a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800033c:	f7ff fffc 	bl	8000338 <HAL_SYSTICK_Callback>
 8000340:	bd08      	pop	{r3, pc}
	...

08000344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000344:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000346:	b350      	cbz	r0, 800039e <HAL_DMA_Init+0x5a>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000348:	6884      	ldr	r4, [r0, #8]
 800034a:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 800034c:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 800034e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000350:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8000352:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000354:	4323      	orrs	r3, r4
 8000356:	6904      	ldr	r4, [r0, #16]
 8000358:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800035a:	6944      	ldr	r4, [r0, #20]
 800035c:	4323      	orrs	r3, r4
 800035e:	6984      	ldr	r4, [r0, #24]
 8000360:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000362:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000364:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000368:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800036c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800036e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000370:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <HAL_DMA_Init+0x60>)
 8000374:	2214      	movs	r2, #20
 8000376:	440b      	add	r3, r1
 8000378:	fbb3 f3f2 	udiv	r3, r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <HAL_DMA_Init+0x64>)
 8000382:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8000384:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8000386:	2300      	movs	r3, #0
 8000388:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800038a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800038c:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800038e:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000390:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000392:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000396:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 800039a:	4618      	mov	r0, r3
 800039c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800039e:	2001      	movs	r0, #1
}  
 80003a0:	bd10      	pop	{r4, pc}
 80003a2:	bf00      	nop
 80003a4:	bffdfff8 	.word	0xbffdfff8
 80003a8:	40020000 	.word	0x40020000

080003ac <HAL_DMA_Start_IT>:
{
 80003ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80003ae:	f890 4020 	ldrb.w	r4, [r0, #32]
 80003b2:	2c01      	cmp	r4, #1
 80003b4:	d035      	beq.n	8000422 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 80003b6:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80003ba:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80003bc:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80003be:	f880 4020 	strb.w	r4, [r0, #32]
 80003c2:	f04f 0600 	mov.w	r6, #0
 80003c6:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80003ca:	d128      	bne.n	800041e <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80003cc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80003d0:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80003d2:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80003d4:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80003d6:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80003d8:	f026 0601 	bic.w	r6, r6, #1
 80003dc:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80003de:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80003e0:	40bd      	lsls	r5, r7
 80003e2:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80003e4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80003e6:	6843      	ldr	r3, [r0, #4]
 80003e8:	6805      	ldr	r5, [r0, #0]
 80003ea:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80003ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 80003ee:	bf0b      	itete	eq
 80003f0:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80003f2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80003f4:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80003f6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80003f8:	b14b      	cbz	r3, 800040e <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80003fa:	6823      	ldr	r3, [r4, #0]
 80003fc:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000400:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000402:	682b      	ldr	r3, [r5, #0]
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800040a:	2000      	movs	r0, #0
 800040c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800040e:	6823      	ldr	r3, [r4, #0]
 8000410:	f043 030a 	orr.w	r3, r3, #10
 8000414:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000416:	6823      	ldr	r3, [r4, #0]
 8000418:	f023 0304 	bic.w	r3, r3, #4
 800041c:	e7f0      	b.n	8000400 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800041e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000422:	2002      	movs	r0, #2
} 
 8000424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000426 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000426:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800042a:	2a02      	cmp	r2, #2
{  
 800042c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800042e:	d003      	beq.n	8000438 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000430:	2204      	movs	r2, #4
 8000432:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000434:	2001      	movs	r0, #1
 8000436:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000438:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800043a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800043c:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 800043e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000440:	f021 010e 	bic.w	r1, r1, #14
 8000444:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000446:	6811      	ldr	r1, [r2, #0]
 8000448:	f021 0101 	bic.w	r1, r1, #1
 800044c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800044e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000450:	2101      	movs	r1, #1
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000458:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800045a:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800045e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000462:	b113      	cbz	r3, 800046a <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8000464:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000466:	4620      	mov	r0, r4
 8000468:	bd10      	pop	{r4, pc}
 800046a:	4618      	mov	r0, r3
}
 800046c:	bd10      	pop	{r4, pc}

0800046e <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800046e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000470:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000472:	6803      	ldr	r3, [r0, #0]
{
 8000474:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000476:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000478:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800047a:	2404      	movs	r4, #4
 800047c:	4094      	lsls	r4, r2
 800047e:	4226      	tst	r6, r4
 8000480:	d00e      	beq.n	80004a0 <HAL_DMA_IRQHandler+0x32>
 8000482:	f015 0f04 	tst.w	r5, #4
 8000486:	d00b      	beq.n	80004a0 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800048c:	bf5e      	ittt	pl
 800048e:	681a      	ldrpl	r2, [r3, #0]
 8000490:	f022 0204 	bicpl.w	r2, r2, #4
 8000494:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000496:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000498:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800049a:	b373      	cbz	r3, 80004fa <HAL_DMA_IRQHandler+0x8c>
}  
 800049c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800049e:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80004a0:	2402      	movs	r4, #2
 80004a2:	4094      	lsls	r4, r2
 80004a4:	4226      	tst	r6, r4
 80004a6:	d012      	beq.n	80004ce <HAL_DMA_IRQHandler+0x60>
 80004a8:	f015 0f02 	tst.w	r5, #2
 80004ac:	d00f      	beq.n	80004ce <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	0695      	lsls	r5, r2, #26
 80004b2:	d406      	bmi.n	80004c2 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	f022 020a 	bic.w	r2, r2, #10
 80004ba:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80004bc:	2301      	movs	r3, #1
 80004be:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 80004c2:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80004c4:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 80004c6:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80004ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80004cc:	e7e5      	b.n	800049a <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80004ce:	2408      	movs	r4, #8
 80004d0:	4094      	lsls	r4, r2
 80004d2:	4234      	tst	r4, r6
 80004d4:	d011      	beq.n	80004fa <HAL_DMA_IRQHandler+0x8c>
 80004d6:	072c      	lsls	r4, r5, #28
 80004d8:	d50f      	bpl.n	80004fa <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004da:	681c      	ldr	r4, [r3, #0]
 80004dc:	f024 040e 	bic.w	r4, r4, #14
 80004e0:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004e2:	2301      	movs	r3, #1
 80004e4:	fa03 f202 	lsl.w	r2, r3, r2
 80004e8:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80004ea:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80004ec:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 80004f0:	2300      	movs	r3, #0
 80004f2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80004f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80004f8:	e7cf      	b.n	800049a <HAL_DMA_IRQHandler+0x2c>
}  
 80004fa:	bc70      	pop	{r4, r5, r6}
 80004fc:	4770      	bx	lr
	...

08000500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000504:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000506:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000508:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000670 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800050c:	4a56      	ldr	r2, [pc, #344]	; (8000668 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800050e:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000510:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000514:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000516:	9c01      	ldr	r4, [sp, #4]
 8000518:	40dc      	lsrs	r4, r3
 800051a:	d102      	bne.n	8000522 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 800051c:	b005      	add	sp, #20
 800051e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000522:	2401      	movs	r4, #1
 8000524:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000528:	9c01      	ldr	r4, [sp, #4]
 800052a:	ea14 050a 	ands.w	r5, r4, sl
 800052e:	f000 8093 	beq.w	8000658 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000532:	684c      	ldr	r4, [r1, #4]
 8000534:	f024 0b10 	bic.w	fp, r4, #16
 8000538:	f1bb 0f02 	cmp.w	fp, #2
 800053c:	d111      	bne.n	8000562 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800053e:	08df      	lsrs	r7, r3, #3
 8000540:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000544:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000548:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800054a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800054e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000552:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000556:	690e      	ldr	r6, [r1, #16]
 8000558:	fa06 f60e 	lsl.w	r6, r6, lr
 800055c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000560:	623e      	str	r6, [r7, #32]
 8000562:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000566:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000568:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800056a:	fa07 f70c 	lsl.w	r7, r7, ip
 800056e:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000570:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000574:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000576:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800057a:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800057e:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000582:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000586:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000588:	d811      	bhi.n	80005ae <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800058a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800058c:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000590:	68ce      	ldr	r6, [r1, #12]
 8000592:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000596:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 800059a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800059c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800059e:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005a2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80005a6:	409e      	lsls	r6, r3
 80005a8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80005ac:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80005ae:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005b0:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005b2:	688e      	ldr	r6, [r1, #8]
 80005b4:	fa06 f60c 	lsl.w	r6, r6, ip
 80005b8:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005ba:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80005bc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005be:	d54b      	bpl.n	8000658 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c0:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80005c4:	f046 0601 	orr.w	r6, r6, #1
 80005c8:	f8c8 6018 	str.w	r6, [r8, #24]
 80005cc:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80005d0:	f023 0703 	bic.w	r7, r3, #3
 80005d4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80005d8:	f006 0601 	and.w	r6, r6, #1
 80005dc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80005e0:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80005e2:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80005e8:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80005ea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80005ee:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005f2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80005f6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005fa:	d02f      	beq.n	800065c <HAL_GPIO_Init+0x15c>
 80005fc:	4e1b      	ldr	r6, [pc, #108]	; (800066c <HAL_GPIO_Init+0x16c>)
 80005fe:	42b0      	cmp	r0, r6
 8000600:	d02e      	beq.n	8000660 <HAL_GPIO_Init+0x160>
 8000602:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000606:	42b0      	cmp	r0, r6
 8000608:	d02c      	beq.n	8000664 <HAL_GPIO_Init+0x164>
 800060a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800060e:	42b0      	cmp	r0, r6
 8000610:	bf14      	ite	ne
 8000612:	2605      	movne	r6, #5
 8000614:	2603      	moveq	r6, #3
 8000616:	fa06 f60e 	lsl.w	r6, r6, lr
 800061a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800061e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000620:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000622:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000624:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000628:	bf0c      	ite	eq
 800062a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800062c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800062e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000630:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000632:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000636:	bf0c      	ite	eq
 8000638:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800063a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 800063c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800063e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000640:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000644:	bf0c      	ite	eq
 8000646:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000648:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 800064a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800064c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800064e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000650:	bf54      	ite	pl
 8000652:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000654:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000656:	60d6      	str	r6, [r2, #12]
    position++;
 8000658:	3301      	adds	r3, #1
 800065a:	e75c      	b.n	8000516 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800065c:	2600      	movs	r6, #0
 800065e:	e7da      	b.n	8000616 <HAL_GPIO_Init+0x116>
 8000660:	2601      	movs	r6, #1
 8000662:	e7d8      	b.n	8000616 <HAL_GPIO_Init+0x116>
 8000664:	2602      	movs	r6, #2
 8000666:	e7d6      	b.n	8000616 <HAL_GPIO_Init+0x116>
 8000668:	40010400 	.word	0x40010400
 800066c:	48000400 	.word	0x48000400
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000674:	6803      	ldr	r3, [r0, #0]
 8000676:	07da      	lsls	r2, r3, #31
{
 8000678:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800067e:	d411      	bmi.n	80006a4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000680:	682b      	ldr	r3, [r5, #0]
 8000682:	079b      	lsls	r3, r3, #30
 8000684:	f100 8088 	bmi.w	8000798 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000688:	682b      	ldr	r3, [r5, #0]
 800068a:	071c      	lsls	r4, r3, #28
 800068c:	f100 80f8 	bmi.w	8000880 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000690:	682b      	ldr	r3, [r5, #0]
 8000692:	0758      	lsls	r0, r3, #29
 8000694:	f100 8141 	bmi.w	800091a <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000698:	69ea      	ldr	r2, [r5, #28]
 800069a:	2a00      	cmp	r2, #0
 800069c:	f040 81d7 	bne.w	8000a4e <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80006a0:	2000      	movs	r0, #0
 80006a2:	e021      	b.n	80006e8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006a4:	4cba      	ldr	r4, [pc, #744]	; (8000990 <HAL_RCC_OscConfig+0x31c>)
 80006a6:	6863      	ldr	r3, [r4, #4]
 80006a8:	f003 030c 	and.w	r3, r3, #12
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d007      	beq.n	80006c0 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006b0:	6863      	ldr	r3, [r4, #4]
 80006b2:	f003 030c 	and.w	r3, r3, #12
 80006b6:	2b08      	cmp	r3, #8
 80006b8:	d119      	bne.n	80006ee <HAL_RCC_OscConfig+0x7a>
 80006ba:	6863      	ldr	r3, [r4, #4]
 80006bc:	03df      	lsls	r7, r3, #15
 80006be:	d516      	bpl.n	80006ee <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006c4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006c8:	6821      	ldr	r1, [r4, #0]
 80006ca:	fa93 f3a3 	rbit	r3, r3
 80006ce:	fab3 f383 	clz	r3, r3
 80006d2:	f003 031f 	and.w	r3, r3, #31
 80006d6:	2201      	movs	r2, #1
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	420b      	tst	r3, r1
 80006de:	d0cf      	beq.n	8000680 <HAL_RCC_OscConfig+0xc>
 80006e0:	686b      	ldr	r3, [r5, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1cc      	bne.n	8000680 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80006e6:	2001      	movs	r0, #1
}
 80006e8:	b002      	add	sp, #8
 80006ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006ee:	686a      	ldr	r2, [r5, #4]
 80006f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80006f4:	d125      	bne.n	8000742 <HAL_RCC_OscConfig+0xce>
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006fc:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80006fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000700:	68a9      	ldr	r1, [r5, #8]
 8000702:	f023 030f 	bic.w	r3, r3, #15
 8000706:	430b      	orrs	r3, r1
 8000708:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800070a:	b352      	cbz	r2, 8000762 <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 800070c:	f7ff fd8a 	bl	8000224 <HAL_GetTick>
 8000710:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000714:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000716:	2701      	movs	r7, #1
 8000718:	fa96 f3a6 	rbit	r3, r6
 800071c:	6822      	ldr	r2, [r4, #0]
 800071e:	fa96 f3a6 	rbit	r3, r6
 8000722:	fab3 f383 	clz	r3, r3
 8000726:	f003 031f 	and.w	r3, r3, #31
 800072a:	fa07 f303 	lsl.w	r3, r7, r3
 800072e:	4213      	tst	r3, r2
 8000730:	d1a6      	bne.n	8000680 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000732:	f7ff fd77 	bl	8000224 <HAL_GetTick>
 8000736:	eba0 0008 	sub.w	r0, r0, r8
 800073a:	2864      	cmp	r0, #100	; 0x64
 800073c:	d9ec      	bls.n	8000718 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 800073e:	2003      	movs	r0, #3
 8000740:	e7d2      	b.n	80006e8 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	b932      	cbnz	r2, 8000754 <HAL_RCC_OscConfig+0xe0>
 8000746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800074a:	6023      	str	r3, [r4, #0]
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	e7d3      	b.n	80006fc <HAL_RCC_OscConfig+0x88>
 8000754:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000758:	d1f5      	bne.n	8000746 <HAL_RCC_OscConfig+0xd2>
 800075a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075e:	6023      	str	r3, [r4, #0]
 8000760:	e7c9      	b.n	80006f6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000762:	f7ff fd5f 	bl	8000224 <HAL_GetTick>
 8000766:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800076a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800076c:	2701      	movs	r7, #1
 800076e:	fa96 f3a6 	rbit	r3, r6
 8000772:	6822      	ldr	r2, [r4, #0]
 8000774:	fa96 f3a6 	rbit	r3, r6
 8000778:	fab3 f383 	clz	r3, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	fa07 f303 	lsl.w	r3, r7, r3
 8000784:	4213      	tst	r3, r2
 8000786:	f43f af7b 	beq.w	8000680 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800078a:	f7ff fd4b 	bl	8000224 <HAL_GetTick>
 800078e:	eba0 0008 	sub.w	r0, r0, r8
 8000792:	2864      	cmp	r0, #100	; 0x64
 8000794:	d9eb      	bls.n	800076e <HAL_RCC_OscConfig+0xfa>
 8000796:	e7d2      	b.n	800073e <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000798:	4c7d      	ldr	r4, [pc, #500]	; (8000990 <HAL_RCC_OscConfig+0x31c>)
 800079a:	6863      	ldr	r3, [r4, #4]
 800079c:	f013 0f0c 	tst.w	r3, #12
 80007a0:	d007      	beq.n	80007b2 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80007a2:	6863      	ldr	r3, [r4, #4]
 80007a4:	f003 030c 	and.w	r3, r3, #12
 80007a8:	2b08      	cmp	r3, #8
 80007aa:	d121      	bne.n	80007f0 <HAL_RCC_OscConfig+0x17c>
 80007ac:	6863      	ldr	r3, [r4, #4]
 80007ae:	03de      	lsls	r6, r3, #15
 80007b0:	d41e      	bmi.n	80007f0 <HAL_RCC_OscConfig+0x17c>
 80007b2:	2302      	movs	r3, #2
 80007b4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007b8:	6821      	ldr	r1, [r4, #0]
 80007ba:	fa93 f3a3 	rbit	r3, r3
 80007be:	fab3 f383 	clz	r3, r3
 80007c2:	f003 031f 	and.w	r3, r3, #31
 80007c6:	2201      	movs	r2, #1
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	420b      	tst	r3, r1
 80007ce:	d002      	beq.n	80007d6 <HAL_RCC_OscConfig+0x162>
 80007d0:	692b      	ldr	r3, [r5, #16]
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d187      	bne.n	80006e6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007d6:	6821      	ldr	r1, [r4, #0]
 80007d8:	23f8      	movs	r3, #248	; 0xf8
 80007da:	fa93 f3a3 	rbit	r3, r3
 80007de:	fab3 f283 	clz	r2, r3
 80007e2:	696b      	ldr	r3, [r5, #20]
 80007e4:	4093      	lsls	r3, r2
 80007e6:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80007ea:	4313      	orrs	r3, r2
 80007ec:	6023      	str	r3, [r4, #0]
 80007ee:	e74b      	b.n	8000688 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007f0:	692a      	ldr	r2, [r5, #16]
 80007f2:	2601      	movs	r6, #1
 80007f4:	b30a      	cbz	r2, 800083a <HAL_RCC_OscConfig+0x1c6>
 80007f6:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80007fa:	fab3 f383 	clz	r3, r3
 80007fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000802:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	2702      	movs	r7, #2
 800080a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800080c:	f7ff fd0a 	bl	8000224 <HAL_GetTick>
 8000810:	4680      	mov	r8, r0
 8000812:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000816:	6822      	ldr	r2, [r4, #0]
 8000818:	fa97 f3a7 	rbit	r3, r7
 800081c:	fab3 f383 	clz	r3, r3
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	fa06 f303 	lsl.w	r3, r6, r3
 8000828:	4213      	tst	r3, r2
 800082a:	d1d4      	bne.n	80007d6 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800082c:	f7ff fcfa 	bl	8000224 <HAL_GetTick>
 8000830:	eba0 0008 	sub.w	r0, r0, r8
 8000834:	2802      	cmp	r0, #2
 8000836:	d9ec      	bls.n	8000812 <HAL_RCC_OscConfig+0x19e>
 8000838:	e781      	b.n	800073e <HAL_RCC_OscConfig+0xca>
 800083a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800083e:	fab3 f383 	clz	r3, r3
 8000842:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000846:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	2702      	movs	r7, #2
 800084e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000850:	f7ff fce8 	bl	8000224 <HAL_GetTick>
 8000854:	4680      	mov	r8, r0
 8000856:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800085a:	6822      	ldr	r2, [r4, #0]
 800085c:	fa97 f3a7 	rbit	r3, r7
 8000860:	fab3 f383 	clz	r3, r3
 8000864:	f003 031f 	and.w	r3, r3, #31
 8000868:	fa06 f303 	lsl.w	r3, r6, r3
 800086c:	4213      	tst	r3, r2
 800086e:	f43f af0b 	beq.w	8000688 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000872:	f7ff fcd7 	bl	8000224 <HAL_GetTick>
 8000876:	eba0 0008 	sub.w	r0, r0, r8
 800087a:	2802      	cmp	r0, #2
 800087c:	d9eb      	bls.n	8000856 <HAL_RCC_OscConfig+0x1e2>
 800087e:	e75e      	b.n	800073e <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000880:	69aa      	ldr	r2, [r5, #24]
 8000882:	4e43      	ldr	r6, [pc, #268]	; (8000990 <HAL_RCC_OscConfig+0x31c>)
 8000884:	4943      	ldr	r1, [pc, #268]	; (8000994 <HAL_RCC_OscConfig+0x320>)
 8000886:	2401      	movs	r4, #1
 8000888:	b31a      	cbz	r2, 80008d2 <HAL_RCC_OscConfig+0x25e>
 800088a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800088e:	fab3 f383 	clz	r3, r3
 8000892:	440b      	add	r3, r1
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	2702      	movs	r7, #2
 8000898:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800089a:	f7ff fcc3 	bl	8000224 <HAL_GetTick>
 800089e:	4680      	mov	r8, r0
 80008a0:	fa97 f3a7 	rbit	r3, r7
 80008a4:	fa97 f3a7 	rbit	r3, r7
 80008a8:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ac:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80008ae:	fa97 f3a7 	rbit	r3, r7
 80008b2:	fab3 f383 	clz	r3, r3
 80008b6:	f003 031f 	and.w	r3, r3, #31
 80008ba:	fa04 f303 	lsl.w	r3, r4, r3
 80008be:	4213      	tst	r3, r2
 80008c0:	f47f aee6 	bne.w	8000690 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008c4:	f7ff fcae 	bl	8000224 <HAL_GetTick>
 80008c8:	eba0 0008 	sub.w	r0, r0, r8
 80008cc:	2802      	cmp	r0, #2
 80008ce:	d9e7      	bls.n	80008a0 <HAL_RCC_OscConfig+0x22c>
 80008d0:	e735      	b.n	800073e <HAL_RCC_OscConfig+0xca>
 80008d2:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80008d6:	fab3 f383 	clz	r3, r3
 80008da:	440b      	add	r3, r1
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	2702      	movs	r7, #2
 80008e0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008e2:	f7ff fc9f 	bl	8000224 <HAL_GetTick>
 80008e6:	4680      	mov	r8, r0
 80008e8:	fa97 f3a7 	rbit	r3, r7
 80008ec:	fa97 f3a7 	rbit	r3, r7
 80008f0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008f4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80008f6:	fa97 f3a7 	rbit	r3, r7
 80008fa:	fab3 f383 	clz	r3, r3
 80008fe:	f003 031f 	and.w	r3, r3, #31
 8000902:	fa04 f303 	lsl.w	r3, r4, r3
 8000906:	4213      	tst	r3, r2
 8000908:	f43f aec2 	beq.w	8000690 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800090c:	f7ff fc8a 	bl	8000224 <HAL_GetTick>
 8000910:	eba0 0008 	sub.w	r0, r0, r8
 8000914:	2802      	cmp	r0, #2
 8000916:	d9e7      	bls.n	80008e8 <HAL_RCC_OscConfig+0x274>
 8000918:	e711      	b.n	800073e <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800091a:	4c1d      	ldr	r4, [pc, #116]	; (8000990 <HAL_RCC_OscConfig+0x31c>)
 800091c:	69e3      	ldr	r3, [r4, #28]
 800091e:	00d9      	lsls	r1, r3, #3
 8000920:	d434      	bmi.n	800098c <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	69e3      	ldr	r3, [r4, #28]
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	61e3      	str	r3, [r4, #28]
 800092a:	69e3      	ldr	r3, [r4, #28]
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000934:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000936:	4f18      	ldr	r7, [pc, #96]	; (8000998 <HAL_RCC_OscConfig+0x324>)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	05da      	lsls	r2, r3, #23
 800093c:	d52e      	bpl.n	800099c <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800093e:	68eb      	ldr	r3, [r5, #12]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d13c      	bne.n	80009be <HAL_RCC_OscConfig+0x34a>
 8000944:	6a23      	ldr	r3, [r4, #32]
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800094c:	f7ff fc6a 	bl	8000224 <HAL_GetTick>
 8000950:	2702      	movs	r7, #2
 8000952:	4682      	mov	sl, r0
 8000954:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000956:	f04f 0801 	mov.w	r8, #1
 800095a:	fa97 f3a7 	rbit	r3, r7
 800095e:	fa97 f3a7 	rbit	r3, r7
 8000962:	2b00      	cmp	r3, #0
 8000964:	d06b      	beq.n	8000a3e <HAL_RCC_OscConfig+0x3ca>
 8000966:	6a22      	ldr	r2, [r4, #32]
 8000968:	fa99 f3a9 	rbit	r3, r9
 800096c:	fab3 f383 	clz	r3, r3
 8000970:	f003 031f 	and.w	r3, r3, #31
 8000974:	fa08 f303 	lsl.w	r3, r8, r3
 8000978:	4213      	tst	r3, r2
 800097a:	d057      	beq.n	8000a2c <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 800097c:	2e00      	cmp	r6, #0
 800097e:	f43f ae8b 	beq.w	8000698 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000982:	69e3      	ldr	r3, [r4, #28]
 8000984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000988:	61e3      	str	r3, [r4, #28]
 800098a:	e685      	b.n	8000698 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800098c:	2600      	movs	r6, #0
 800098e:	e7d2      	b.n	8000936 <HAL_RCC_OscConfig+0x2c2>
 8000990:	40021000 	.word	0x40021000
 8000994:	10908120 	.word	0x10908120
 8000998:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80009a4:	f7ff fc3e 	bl	8000224 <HAL_GetTick>
 80009a8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	d4c6      	bmi.n	800093e <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009b0:	f7ff fc38 	bl	8000224 <HAL_GetTick>
 80009b4:	eba0 0008 	sub.w	r0, r0, r8
 80009b8:	2864      	cmp	r0, #100	; 0x64
 80009ba:	d9f6      	bls.n	80009aa <HAL_RCC_OscConfig+0x336>
 80009bc:	e6bf      	b.n	800073e <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009be:	bb3b      	cbnz	r3, 8000a10 <HAL_RCC_OscConfig+0x39c>
 80009c0:	6a23      	ldr	r3, [r4, #32]
 80009c2:	f023 0301 	bic.w	r3, r3, #1
 80009c6:	6223      	str	r3, [r4, #32]
 80009c8:	6a23      	ldr	r3, [r4, #32]
 80009ca:	f023 0304 	bic.w	r3, r3, #4
 80009ce:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80009d0:	f7ff fc28 	bl	8000224 <HAL_GetTick>
 80009d4:	2702      	movs	r7, #2
 80009d6:	4682      	mov	sl, r0
 80009d8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009da:	f04f 0801 	mov.w	r8, #1
 80009de:	fa97 f3a7 	rbit	r3, r7
 80009e2:	fa97 f3a7 	rbit	r3, r7
 80009e6:	b373      	cbz	r3, 8000a46 <HAL_RCC_OscConfig+0x3d2>
 80009e8:	6a22      	ldr	r2, [r4, #32]
 80009ea:	fa99 f3a9 	rbit	r3, r9
 80009ee:	fab3 f383 	clz	r3, r3
 80009f2:	f003 031f 	and.w	r3, r3, #31
 80009f6:	fa08 f303 	lsl.w	r3, r8, r3
 80009fa:	4213      	tst	r3, r2
 80009fc:	d0be      	beq.n	800097c <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009fe:	f7ff fc11 	bl	8000224 <HAL_GetTick>
 8000a02:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a06:	eba0 000a 	sub.w	r0, r0, sl
 8000a0a:	4298      	cmp	r0, r3
 8000a0c:	d9e7      	bls.n	80009de <HAL_RCC_OscConfig+0x36a>
 8000a0e:	e696      	b.n	800073e <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a10:	2b05      	cmp	r3, #5
 8000a12:	6a23      	ldr	r3, [r4, #32]
 8000a14:	d103      	bne.n	8000a1e <HAL_RCC_OscConfig+0x3aa>
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6223      	str	r3, [r4, #32]
 8000a1c:	e792      	b.n	8000944 <HAL_RCC_OscConfig+0x2d0>
 8000a1e:	f023 0301 	bic.w	r3, r3, #1
 8000a22:	6223      	str	r3, [r4, #32]
 8000a24:	6a23      	ldr	r3, [r4, #32]
 8000a26:	f023 0304 	bic.w	r3, r3, #4
 8000a2a:	e78e      	b.n	800094a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a2c:	f7ff fbfa 	bl	8000224 <HAL_GetTick>
 8000a30:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a34:	eba0 000a 	sub.w	r0, r0, sl
 8000a38:	4298      	cmp	r0, r3
 8000a3a:	d98e      	bls.n	800095a <HAL_RCC_OscConfig+0x2e6>
 8000a3c:	e67f      	b.n	800073e <HAL_RCC_OscConfig+0xca>
 8000a3e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a44:	e790      	b.n	8000968 <HAL_RCC_OscConfig+0x2f4>
 8000a46:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a4c:	e7cd      	b.n	80009ea <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a4e:	4c41      	ldr	r4, [pc, #260]	; (8000b54 <HAL_RCC_OscConfig+0x4e0>)
 8000a50:	6863      	ldr	r3, [r4, #4]
 8000a52:	f003 030c 	and.w	r3, r3, #12
 8000a56:	2b08      	cmp	r3, #8
 8000a58:	f43f ae45 	beq.w	80006e6 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a5c:	2a02      	cmp	r2, #2
 8000a5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a62:	d152      	bne.n	8000b0a <HAL_RCC_OscConfig+0x496>
 8000a64:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a68:	fab3 f383 	clz	r3, r3
 8000a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a7a:	f7ff fbd3 	bl	8000224 <HAL_GetTick>
 8000a7e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000a82:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a84:	2601      	movs	r6, #1
 8000a86:	fa97 f3a7 	rbit	r3, r7
 8000a8a:	6822      	ldr	r2, [r4, #0]
 8000a8c:	fa97 f3a7 	rbit	r3, r7
 8000a90:	fab3 f383 	clz	r3, r3
 8000a94:	f003 031f 	and.w	r3, r3, #31
 8000a98:	fa06 f303 	lsl.w	r3, r6, r3
 8000a9c:	4213      	tst	r3, r2
 8000a9e:	d12d      	bne.n	8000afc <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000aa0:	6862      	ldr	r2, [r4, #4]
 8000aa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000aa4:	6a29      	ldr	r1, [r5, #32]
 8000aa6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000aaa:	430b      	orrs	r3, r1
 8000aac:	4313      	orrs	r3, r2
 8000aae:	6063      	str	r3, [r4, #4]
 8000ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ab4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000ab8:	fab3 f383 	clz	r3, r3
 8000abc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ac0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000aca:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000acc:	f7ff fbaa 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ad0:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000ad2:	4607      	mov	r7, r0
 8000ad4:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ad8:	6822      	ldr	r2, [r4, #0]
 8000ada:	fa95 f3a5 	rbit	r3, r5
 8000ade:	fab3 f383 	clz	r3, r3
 8000ae2:	f003 031f 	and.w	r3, r3, #31
 8000ae6:	fa06 f303 	lsl.w	r3, r6, r3
 8000aea:	4213      	tst	r3, r2
 8000aec:	f47f add8 	bne.w	80006a0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000af0:	f7ff fb98 	bl	8000224 <HAL_GetTick>
 8000af4:	1bc0      	subs	r0, r0, r7
 8000af6:	2802      	cmp	r0, #2
 8000af8:	d9ec      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x460>
 8000afa:	e620      	b.n	800073e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000afc:	f7ff fb92 	bl	8000224 <HAL_GetTick>
 8000b00:	eba0 0008 	sub.w	r0, r0, r8
 8000b04:	2802      	cmp	r0, #2
 8000b06:	d9be      	bls.n	8000a86 <HAL_RCC_OscConfig+0x412>
 8000b08:	e619      	b.n	800073e <HAL_RCC_OscConfig+0xca>
 8000b0a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b0e:	fab3 f383 	clz	r3, r3
 8000b12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b20:	f7ff fb80 	bl	8000224 <HAL_GetTick>
 8000b24:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000b28:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b2a:	2601      	movs	r6, #1
 8000b2c:	fa95 f3a5 	rbit	r3, r5
 8000b30:	6822      	ldr	r2, [r4, #0]
 8000b32:	fa95 f3a5 	rbit	r3, r5
 8000b36:	fab3 f383 	clz	r3, r3
 8000b3a:	f003 031f 	and.w	r3, r3, #31
 8000b3e:	fa06 f303 	lsl.w	r3, r6, r3
 8000b42:	4213      	tst	r3, r2
 8000b44:	f43f adac 	beq.w	80006a0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b48:	f7ff fb6c 	bl	8000224 <HAL_GetTick>
 8000b4c:	1bc0      	subs	r0, r0, r7
 8000b4e:	2802      	cmp	r0, #2
 8000b50:	d9ec      	bls.n	8000b2c <HAL_RCC_OscConfig+0x4b8>
 8000b52:	e5f4      	b.n	800073e <HAL_RCC_OscConfig+0xca>
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b58:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000b5a:	4c13      	ldr	r4, [pc, #76]	; (8000ba8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b5c:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b5e:	f001 030c 	and.w	r3, r1, #12
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d11e      	bne.n	8000ba4 <HAL_RCC_GetSysClockFreq+0x4c>
 8000b66:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000b6a:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b6e:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000b72:	fab3 f383 	clz	r3, r3
 8000b76:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <HAL_RCC_GetSysClockFreq+0x54>)
 8000b7c:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b80:	220f      	movs	r2, #15
 8000b82:	fa92 f2a2 	rbit	r2, r2
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	40d3      	lsrs	r3, r2
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b92:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b94:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b96:	bf4a      	itet	mi
 8000b98:	4b06      	ldrmi	r3, [pc, #24]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b9a:	4b07      	ldrpl	r3, [pc, #28]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b9c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000ba0:	4358      	muls	r0, r3
 8000ba2:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ba6:	bd10      	pop	{r4, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	08001780 	.word	0x08001780
 8000bb0:	08001790 	.word	0x08001790
 8000bb4:	007a1200 	.word	0x007a1200
 8000bb8:	003d0900 	.word	0x003d0900

08000bbc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bbc:	4a5c      	ldr	r2, [pc, #368]	; (8000d30 <HAL_RCC_ClockConfig+0x174>)
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	428b      	cmp	r3, r1
{
 8000bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bca:	4606      	mov	r6, r0
 8000bcc:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bce:	d330      	bcc.n	8000c32 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bd0:	6832      	ldr	r2, [r6, #0]
 8000bd2:	0791      	lsls	r1, r2, #30
 8000bd4:	d43a      	bmi.n	8000c4c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bd6:	07d2      	lsls	r2, r2, #31
 8000bd8:	d440      	bmi.n	8000c5c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bda:	4a55      	ldr	r2, [pc, #340]	; (8000d30 <HAL_RCC_ClockConfig+0x174>)
 8000bdc:	6813      	ldr	r3, [r2, #0]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	429d      	cmp	r5, r3
 8000be4:	f0c0 8092 	bcc.w	8000d0c <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000be8:	6832      	ldr	r2, [r6, #0]
 8000bea:	4c52      	ldr	r4, [pc, #328]	; (8000d34 <HAL_RCC_ClockConfig+0x178>)
 8000bec:	f012 0f04 	tst.w	r2, #4
 8000bf0:	f040 8097 	bne.w	8000d22 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bf4:	0713      	lsls	r3, r2, #28
 8000bf6:	d506      	bpl.n	8000c06 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bf8:	6863      	ldr	r3, [r4, #4]
 8000bfa:	6932      	ldr	r2, [r6, #16]
 8000bfc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c04:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c06:	f7ff ffa7 	bl	8000b58 <HAL_RCC_GetSysClockFreq>
 8000c0a:	6863      	ldr	r3, [r4, #4]
 8000c0c:	22f0      	movs	r2, #240	; 0xf0
 8000c0e:	fa92 f2a2 	rbit	r2, r2
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c1a:	40d3      	lsrs	r3, r2
 8000c1c:	4a46      	ldr	r2, [pc, #280]	; (8000d38 <HAL_RCC_ClockConfig+0x17c>)
 8000c1e:	5cd3      	ldrb	r3, [r2, r3]
 8000c20:	40d8      	lsrs	r0, r3
 8000c22:	4b46      	ldr	r3, [pc, #280]	; (8000d3c <HAL_RCC_ClockConfig+0x180>)
 8000c24:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff face 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000c2c:	2000      	movs	r0, #0
}
 8000c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	f023 0307 	bic.w	r3, r3, #7
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c3c:	6813      	ldr	r3, [r2, #0]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d0c4      	beq.n	8000bd0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000c46:	2001      	movs	r0, #1
 8000c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c4c:	4939      	ldr	r1, [pc, #228]	; (8000d34 <HAL_RCC_ClockConfig+0x178>)
 8000c4e:	68b0      	ldr	r0, [r6, #8]
 8000c50:	684b      	ldr	r3, [r1, #4]
 8000c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c56:	4303      	orrs	r3, r0
 8000c58:	604b      	str	r3, [r1, #4]
 8000c5a:	e7bc      	b.n	8000bd6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c5c:	6872      	ldr	r2, [r6, #4]
 8000c5e:	4c35      	ldr	r4, [pc, #212]	; (8000d34 <HAL_RCC_ClockConfig+0x178>)
 8000c60:	2a01      	cmp	r2, #1
 8000c62:	d128      	bne.n	8000cb6 <HAL_RCC_ClockConfig+0xfa>
 8000c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c68:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6c:	6821      	ldr	r1, [r4, #0]
 8000c6e:	fa93 f3a3 	rbit	r3, r3
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	f003 031f 	and.w	r3, r3, #31
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c80:	d0e1      	beq.n	8000c46 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c82:	6863      	ldr	r3, [r4, #4]
 8000c84:	f023 0303 	bic.w	r3, r3, #3
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000c8c:	f7ff faca 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c90:	6873      	ldr	r3, [r6, #4]
 8000c92:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000c94:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c96:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c9a:	d11f      	bne.n	8000cdc <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c9c:	6863      	ldr	r3, [r4, #4]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d099      	beq.n	8000bda <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ca6:	f7ff fabd 	bl	8000224 <HAL_GetTick>
 8000caa:	1bc0      	subs	r0, r0, r7
 8000cac:	4540      	cmp	r0, r8
 8000cae:	d9f5      	bls.n	8000c9c <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cb6:	2a02      	cmp	r2, #2
 8000cb8:	bf0c      	ite	eq
 8000cba:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000cbe:	2302      	movne	r3, #2
 8000cc0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc4:	6820      	ldr	r0, [r4, #0]
 8000cc6:	fa93 f3a3 	rbit	r3, r3
 8000cca:	fab3 f383 	clz	r3, r3
 8000cce:	f003 031f 	and.w	r3, r3, #31
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4203      	tst	r3, r0
 8000cda:	e7d1      	b.n	8000c80 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d110      	bne.n	8000d02 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ce0:	6863      	ldr	r3, [r4, #4]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	f43f af77 	beq.w	8000bda <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cec:	f7ff fa9a 	bl	8000224 <HAL_GetTick>
 8000cf0:	1bc0      	subs	r0, r0, r7
 8000cf2:	4540      	cmp	r0, r8
 8000cf4:	d9f4      	bls.n	8000ce0 <HAL_RCC_ClockConfig+0x124>
 8000cf6:	e7db      	b.n	8000cb0 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf8:	f7ff fa94 	bl	8000224 <HAL_GetTick>
 8000cfc:	1bc0      	subs	r0, r0, r7
 8000cfe:	4540      	cmp	r0, r8
 8000d00:	d8d6      	bhi.n	8000cb0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d02:	6863      	ldr	r3, [r4, #4]
 8000d04:	f013 0f0c 	tst.w	r3, #12
 8000d08:	d1f6      	bne.n	8000cf8 <HAL_RCC_ClockConfig+0x13c>
 8000d0a:	e766      	b.n	8000bda <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d0c:	6813      	ldr	r3, [r2, #0]
 8000d0e:	f023 0307 	bic.w	r3, r3, #7
 8000d12:	432b      	orrs	r3, r5
 8000d14:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d16:	6813      	ldr	r3, [r2, #0]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	429d      	cmp	r5, r3
 8000d1e:	d192      	bne.n	8000c46 <HAL_RCC_ClockConfig+0x8a>
 8000d20:	e762      	b.n	8000be8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d22:	6863      	ldr	r3, [r4, #4]
 8000d24:	68f1      	ldr	r1, [r6, #12]
 8000d26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	6063      	str	r3, [r4, #4]
 8000d2e:	e761      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x38>
 8000d30:	40022000 	.word	0x40022000
 8000d34:	40021000 	.word	0x40021000
 8000d38:	080017bf 	.word	0x080017bf
 8000d3c:	2000000c 	.word	0x2000000c

08000d40 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d40:	4b01      	ldr	r3, [pc, #4]	; (8000d48 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000000c 	.word	0x2000000c

08000d4c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	fa92 f2a2 	rbit	r2, r2
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d60:	40d3      	lsrs	r3, r2
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d64:	5cd3      	ldrb	r3, [r2, r3]
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000d68:	6810      	ldr	r0, [r2, #0]
}    
 8000d6a:	40d8      	lsrs	r0, r3
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	080017cf 	.word	0x080017cf
 8000d78:	2000000c 	.word	0x2000000c

08000d7c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d7e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	fa92 f2a2 	rbit	r2, r2
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d90:	40d3      	lsrs	r3, r2
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000d94:	5cd3      	ldrb	r3, [r2, r3]
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000d98:	6810      	ldr	r0, [r2, #0]
} 
 8000d9a:	40d8      	lsrs	r0, r3
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000
 8000da4:	080017cf 	.word	0x080017cf
 8000da8:	2000000c 	.word	0x2000000c

08000dac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000dac:	6803      	ldr	r3, [r0, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000db4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	f022 0201 	bic.w	r2, r2, #1
 8000dbc:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8000dc4:	4770      	bx	lr
	...

08000dc8 <HAL_UART_Transmit_DMA>:
{
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4604      	mov	r4, r0
 8000dcc:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000dce:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8000dd2:	2a20      	cmp	r2, #32
 8000dd4:	d12b      	bne.n	8000e2e <HAL_UART_Transmit_DMA+0x66>
    if((pData == NULL ) || (Size == 0U))
 8000dd6:	b341      	cbz	r1, 8000e2a <HAL_UART_Transmit_DMA+0x62>
 8000dd8:	b33b      	cbz	r3, 8000e2a <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 8000dda:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8000dde:	2a01      	cmp	r2, #1
 8000de0:	d025      	beq.n	8000e2e <HAL_UART_Transmit_DMA+0x66>
 8000de2:	2201      	movs	r2, #1
 8000de4:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8000de8:	6e20      	ldr	r0, [r4, #96]	; 0x60
    huart->TxXferCount = Size;
 8000dea:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dee:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000df0:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000df2:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000df4:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize = Size;
 8000dfa:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr = pData;
 8000dfe:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8000e00:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8000e02:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_UART_Transmit_DMA+0x70>)
 8000e04:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_UART_Transmit_DMA+0x74>)
 8000e08:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8000e0a:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8000e0c:	6345      	str	r5, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8000e0e:	3228      	adds	r2, #40	; 0x28
 8000e10:	f7ff facc 	bl	80003ac <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000e1a:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8000e1c:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000e20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e24:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8000e26:	4628      	mov	r0, r5
 8000e28:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8000e2e:	2002      	movs	r0, #2
}
 8000e30:	bd38      	pop	{r3, r4, r5, pc}
 8000e32:	bf00      	nop
 8000e34:	08000e43 	.word	0x08000e43
 8000e38:	08000e73 	.word	0x08000e73
 8000e3c:	08000e81 	.word	0x08000e81

08000e40 <HAL_UART_TxCpltCallback>:
 8000e40:	4770      	bx	lr

08000e42 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8000e42:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8000e44:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8000e46:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f013 0320 	ands.w	r3, r3, #32
 8000e4e:	d10b      	bne.n	8000e68 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8000e50:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000e54:	6813      	ldr	r3, [r2, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e5c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f7ff ffe9 	bl	8000e40 <HAL_UART_TxCpltCallback>
 8000e6e:	bd08      	pop	{r3, pc}

08000e70 <HAL_UART_TxHalfCpltCallback>:
 8000e70:	4770      	bx	lr

08000e72 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8000e72:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8000e74:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000e76:	f7ff fffb 	bl	8000e70 <HAL_UART_TxHalfCpltCallback>
 8000e7a:	bd08      	pop	{r3, pc}

08000e7c <HAL_UART_RxCpltCallback>:
 8000e7c:	4770      	bx	lr

08000e7e <HAL_UART_ErrorCallback>:
 8000e7e:	4770      	bx	lr

08000e80 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8000e80:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8000e82:	b508      	push	{r3, lr}

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8000e84:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 8000e88:	2b21      	cmp	r3, #33	; 0x21
 8000e8a:	d10d      	bne.n	8000ea8 <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8000e8c:	680b      	ldr	r3, [r1, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	0612      	lsls	r2, r2, #24
 8000e92:	d509      	bpl.n	8000ea8 <UART_DMAError+0x28>
  {
    huart->TxXferCount = 0U;
 8000e94:	2200      	movs	r2, #0
 8000e96:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000ea0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8000ea2:	2320      	movs	r3, #32
 8000ea4:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000ea8:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 8000eac:	2b22      	cmp	r3, #34	; 0x22
 8000eae:	d109      	bne.n	8000ec4 <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8000eb0:	680b      	ldr	r3, [r1, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	065b      	lsls	r3, r3, #25
 8000eb6:	d505      	bpl.n	8000ec4 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	f7ff ff74 	bl	8000dac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8000ec4:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8000ecc:	4608      	mov	r0, r1
 8000ece:	f7ff ffd6 	bl	8000e7e <HAL_UART_ErrorCallback>
 8000ed2:	bd08      	pop	{r3, pc}

08000ed4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8000ed6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8000ede:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8000ee2:	f7ff ffcc 	bl	8000e7e <HAL_UART_ErrorCallback>
 8000ee6:	bd08      	pop	{r3, pc}

08000ee8 <UART_SetConfig>:
{
 8000ee8:	b538      	push	{r3, r4, r5, lr}
 8000eea:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000eec:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000eee:	6921      	ldr	r1, [r4, #16]
 8000ef0:	68a3      	ldr	r3, [r4, #8]
 8000ef2:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ef4:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	6961      	ldr	r1, [r4, #20]
 8000efa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000efc:	4949      	ldr	r1, [pc, #292]	; (8001024 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000efe:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f00:	4001      	ands	r1, r0
 8000f02:	430b      	orrs	r3, r1
 8000f04:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f06:	686b      	ldr	r3, [r5, #4]
 8000f08:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f0a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f10:	430b      	orrs	r3, r1
 8000f12:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f14:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f16:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f18:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f1c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <UART_SetConfig+0x140>)
 8000f24:	429d      	cmp	r5, r3
 8000f26:	d112      	bne.n	8000f4e <UART_SetConfig+0x66>
 8000f28:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000f2c:	493f      	ldr	r1, [pc, #252]	; (800102c <UART_SetConfig+0x144>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f34:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000f38:	5ccb      	ldrb	r3, [r1, r3]
 8000f3a:	d13b      	bne.n	8000fb4 <UART_SetConfig+0xcc>
    switch (clocksource)
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d836      	bhi.n	8000fae <UART_SetConfig+0xc6>
 8000f40:	e8df f003 	tbb	[pc, r3]
 8000f44:	3524210f 	.word	0x3524210f
 8000f48:	3535352d 	.word	0x3535352d
 8000f4c:	30          	.byte	0x30
 8000f4d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f4e:	4b38      	ldr	r3, [pc, #224]	; (8001030 <UART_SetConfig+0x148>)
 8000f50:	429d      	cmp	r5, r3
 8000f52:	d003      	beq.n	8000f5c <UART_SetConfig+0x74>
 8000f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f58:	429d      	cmp	r5, r3
 8000f5a:	d15e      	bne.n	800101a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f5c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000f60:	d131      	bne.n	8000fc6 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000f62:	f7ff fef3 	bl	8000d4c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f66:	6861      	ldr	r1, [r4, #4]
 8000f68:	084a      	lsrs	r2, r1, #1
 8000f6a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f72:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8000f74:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8000f76:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8000f7a:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000f7c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000f80:	4313      	orrs	r3, r2
 8000f82:	60cb      	str	r3, [r1, #12]
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000f86:	f7ff fef9 	bl	8000d7c <HAL_RCC_GetPCLK2Freq>
 8000f8a:	e7ec      	b.n	8000f66 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000f8c:	6860      	ldr	r0, [r4, #4]
 8000f8e:	0843      	lsrs	r3, r0, #1
 8000f90:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000f94:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f98:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f9c:	e7e9      	b.n	8000f72 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f9e:	f7ff fddb 	bl	8000b58 <HAL_RCC_GetSysClockFreq>
 8000fa2:	e7e0      	b.n	8000f66 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000fa4:	6860      	ldr	r0, [r4, #4]
 8000fa6:	0843      	lsrs	r3, r0, #1
 8000fa8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000fac:	e7f4      	b.n	8000f98 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8000fae:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e7e0      	b.n	8000f76 <UART_SetConfig+0x8e>
    switch (clocksource)
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d833      	bhi.n	8001020 <UART_SetConfig+0x138>
 8000fb8:	e8df f003 	tbb	[pc, r3]
 8000fbc:	321b1005 	.word	0x321b1005
 8000fc0:	32323227 	.word	0x32323227
 8000fc4:	2a          	.byte	0x2a
 8000fc5:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000fc6:	f7ff fec1 	bl	8000d4c <HAL_RCC_GetPCLK1Freq>
 8000fca:	6863      	ldr	r3, [r4, #4]
 8000fcc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000fd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd4:	b280      	uxth	r0, r0
 8000fd6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000fd8:	2000      	movs	r0, #0
        break;
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000fdc:	f7ff fece 	bl	8000d7c <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000fe0:	6863      	ldr	r3, [r4, #4]
 8000fe2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000fe6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <UART_SetConfig+0x140>)
 8000fec:	b280      	uxth	r0, r0
 8000fee:	60d8      	str	r0, [r3, #12]
 8000ff0:	e7f2      	b.n	8000fd8 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000ff2:	6862      	ldr	r2, [r4, #4]
 8000ff4:	0853      	lsrs	r3, r2, #1
 8000ff6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000ffa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8001002:	4a09      	ldr	r2, [pc, #36]	; (8001028 <UART_SetConfig+0x140>)
 8001004:	b29b      	uxth	r3, r3
 8001006:	60d3      	str	r3, [r2, #12]
 8001008:	e7e6      	b.n	8000fd8 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800100a:	f7ff fda5 	bl	8000b58 <HAL_RCC_GetSysClockFreq>
 800100e:	e7e7      	b.n	8000fe0 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001010:	6862      	ldr	r2, [r4, #4]
 8001012:	0853      	lsrs	r3, r2, #1
 8001014:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001018:	e7f1      	b.n	8000ffe <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800101a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800101e:	d0c6      	beq.n	8000fae <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8001020:	2001      	movs	r0, #1
  return ret;
 8001022:	bd38      	pop	{r3, r4, r5, pc}
 8001024:	efff69f3 	.word	0xefff69f3
 8001028:	40013800 	.word	0x40013800
 800102c:	080017a0 	.word	0x080017a0
 8001030:	40004400 	.word	0x40004400

08001034 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001034:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001036:	07da      	lsls	r2, r3, #31
{
 8001038:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800103a:	d506      	bpl.n	800104a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800103c:	6801      	ldr	r1, [r0, #0]
 800103e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001040:	684a      	ldr	r2, [r1, #4]
 8001042:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001046:	4322      	orrs	r2, r4
 8001048:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800104a:	079c      	lsls	r4, r3, #30
 800104c:	d506      	bpl.n	800105c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800104e:	6801      	ldr	r1, [r0, #0]
 8001050:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001052:	684a      	ldr	r2, [r1, #4]
 8001054:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001058:	4322      	orrs	r2, r4
 800105a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800105c:	0759      	lsls	r1, r3, #29
 800105e:	d506      	bpl.n	800106e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001060:	6801      	ldr	r1, [r0, #0]
 8001062:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001064:	684a      	ldr	r2, [r1, #4]
 8001066:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800106a:	4322      	orrs	r2, r4
 800106c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800106e:	071a      	lsls	r2, r3, #28
 8001070:	d506      	bpl.n	8001080 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001072:	6801      	ldr	r1, [r0, #0]
 8001074:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001076:	684a      	ldr	r2, [r1, #4]
 8001078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800107c:	4322      	orrs	r2, r4
 800107e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001080:	06dc      	lsls	r4, r3, #27
 8001082:	d506      	bpl.n	8001092 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001084:	6801      	ldr	r1, [r0, #0]
 8001086:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001088:	688a      	ldr	r2, [r1, #8]
 800108a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800108e:	4322      	orrs	r2, r4
 8001090:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001092:	0699      	lsls	r1, r3, #26
 8001094:	d506      	bpl.n	80010a4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001096:	6801      	ldr	r1, [r0, #0]
 8001098:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800109a:	688a      	ldr	r2, [r1, #8]
 800109c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010a0:	4322      	orrs	r2, r4
 80010a2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80010a4:	065a      	lsls	r2, r3, #25
 80010a6:	d50f      	bpl.n	80010c8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80010a8:	6801      	ldr	r1, [r0, #0]
 80010aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80010ac:	684a      	ldr	r2, [r1, #4]
 80010ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80010b2:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80010b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80010b8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80010ba:	d105      	bne.n	80010c8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80010bc:	684a      	ldr	r2, [r1, #4]
 80010be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80010c0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80010c4:	4322      	orrs	r2, r4
 80010c6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80010c8:	061b      	lsls	r3, r3, #24
 80010ca:	d506      	bpl.n	80010da <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80010cc:	6802      	ldr	r2, [r0, #0]
 80010ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80010d0:	6853      	ldr	r3, [r2, #4]
 80010d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80010d6:	430b      	orrs	r3, r1
 80010d8:	6053      	str	r3, [r2, #4]
 80010da:	bd10      	pop	{r4, pc}

080010dc <UART_WaitOnFlagUntilTimeout>:
{
 80010dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010e0:	9d06      	ldr	r5, [sp, #24]
 80010e2:	4604      	mov	r4, r0
 80010e4:	460f      	mov	r7, r1
 80010e6:	4616      	mov	r6, r2
 80010e8:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010ea:	6821      	ldr	r1, [r4, #0]
 80010ec:	69ca      	ldr	r2, [r1, #28]
 80010ee:	ea37 0302 	bics.w	r3, r7, r2
 80010f2:	bf0c      	ite	eq
 80010f4:	2201      	moveq	r2, #1
 80010f6:	2200      	movne	r2, #0
 80010f8:	42b2      	cmp	r2, r6
 80010fa:	d002      	beq.n	8001102 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80010fc:	2000      	movs	r0, #0
}
 80010fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001102:	1c6b      	adds	r3, r5, #1
 8001104:	d0f2      	beq.n	80010ec <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001106:	b99d      	cbnz	r5, 8001130 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001110:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	f022 0201 	bic.w	r2, r2, #1
 8001118:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800111a:	2320      	movs	r3, #32
 800111c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001120:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001124:	2300      	movs	r3, #0
 8001126:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800112a:	2003      	movs	r0, #3
 800112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001130:	f7ff f878 	bl	8000224 <HAL_GetTick>
 8001134:	eba0 0008 	sub.w	r0, r0, r8
 8001138:	4285      	cmp	r5, r0
 800113a:	d2d6      	bcs.n	80010ea <UART_WaitOnFlagUntilTimeout+0xe>
 800113c:	e7e4      	b.n	8001108 <UART_WaitOnFlagUntilTimeout+0x2c>

0800113e <UART_CheckIdleState>:
{
 800113e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001140:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001142:	2600      	movs	r6, #0
 8001144:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001146:	f7ff f86d 	bl	8000224 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001150:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001152:	d417      	bmi.n	8001184 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	075b      	lsls	r3, r3, #29
 800115a:	d50a      	bpl.n	8001172 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800115c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	462b      	mov	r3, r5
 8001166:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800116a:	4620      	mov	r0, r4
 800116c:	f7ff ffb6 	bl	80010dc <UART_WaitOnFlagUntilTimeout>
 8001170:	b9a0      	cbnz	r0, 800119c <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001172:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001174:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001176:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800117a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800117e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001182:	e00c      	b.n	800119e <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	4632      	mov	r2, r6
 800118c:	4603      	mov	r3, r0
 800118e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001192:	4620      	mov	r0, r4
 8001194:	f7ff ffa2 	bl	80010dc <UART_WaitOnFlagUntilTimeout>
 8001198:	2800      	cmp	r0, #0
 800119a:	d0db      	beq.n	8001154 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800119c:	2003      	movs	r0, #3
}
 800119e:	b002      	add	sp, #8
 80011a0:	bd70      	pop	{r4, r5, r6, pc}

080011a2 <HAL_UART_Init>:
{
 80011a2:	b510      	push	{r4, lr}
  if(huart == NULL)
 80011a4:	4604      	mov	r4, r0
 80011a6:	b360      	cbz	r0, 8001202 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80011a8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80011ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011b0:	b91b      	cbnz	r3, 80011ba <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80011b2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80011b6:	f000 f9f7 	bl	80015a8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80011ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80011bc:	2324      	movs	r3, #36	; 0x24
 80011be:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	f023 0301 	bic.w	r3, r3, #1
 80011c8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff fe8c 	bl	8000ee8 <UART_SetConfig>
 80011d0:	2801      	cmp	r0, #1
 80011d2:	d016      	beq.n	8001202 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80011d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011d6:	b113      	cbz	r3, 80011de <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff ff2b 	bl	8001034 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80011e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011ee:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80011f6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80011f8:	601a      	str	r2, [r3, #0]
}
 80011fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80011fe:	f7ff bf9e 	b.w	800113e <UART_CheckIdleState>
}
 8001202:	2001      	movs	r0, #1
 8001204:	bd10      	pop	{r4, pc}

08001206 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001206:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800120a:	2b21      	cmp	r3, #33	; 0x21
 800120c:	d127      	bne.n	800125e <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 800120e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001212:	6802      	ldr	r2, [r0, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	b94b      	cbnz	r3, 800122c <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001218:	6811      	ldr	r1, [r2, #0]
 800121a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800121e:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001220:	6811      	ldr	r1, [r2, #0]
 8001222:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001226:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8001228:	2000      	movs	r0, #0
 800122a:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800122c:	6883      	ldr	r3, [r0, #8]
 800122e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001232:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001234:	d10e      	bne.n	8001254 <UART_Transmit_IT+0x4e>
 8001236:	6901      	ldr	r1, [r0, #16]
 8001238:	b961      	cbnz	r1, 8001254 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800123a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800123e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001242:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001244:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001246:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800124a:	3b01      	subs	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8001252:	e7e9      	b.n	8001228 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001254:	1c59      	adds	r1, r3, #1
 8001256:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	8513      	strh	r3, [r2, #40]	; 0x28
 800125c:	e7f3      	b.n	8001246 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 800125e:	2002      	movs	r0, #2
  }
}
 8001260:	4770      	bx	lr

08001262 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001262:	6801      	ldr	r1, [r0, #0]
{
 8001264:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001266:	680b      	ldr	r3, [r1, #0]
 8001268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800126c:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800126e:	2320      	movs	r3, #32
 8001270:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8001274:	f7ff fde4 	bl	8000e40 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001278:	2000      	movs	r0, #0
 800127a:	bd08      	pop	{r3, pc}

0800127c <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800127c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001280:	2b22      	cmp	r3, #34	; 0x22
{
 8001282:	b510      	push	{r4, lr}
 8001284:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001286:	d129      	bne.n	80012dc <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001288:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800128a:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 800128c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001294:	ea02 0201 	and.w	r2, r2, r1
 8001298:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800129a:	d11b      	bne.n	80012d4 <UART_Receive_IT+0x58>
 800129c:	6901      	ldr	r1, [r0, #16]
 800129e:	b9c9      	cbnz	r1, 80012d4 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80012a0:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80012a4:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80012a6:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80012aa:	3c01      	subs	r4, #1
 80012ac:	b2a4      	uxth	r4, r4
 80012ae:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80012b2:	b96c      	cbnz	r4, 80012d0 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012b4:	6803      	ldr	r3, [r0, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80012bc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	f022 0201 	bic.w	r2, r2, #1
 80012c4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80012c6:	2320      	movs	r3, #32
 80012c8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80012cc:	f7ff fdd6 	bl	8000e7c <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80012d0:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80012d2:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80012d4:	1c59      	adds	r1, r3, #1
 80012d6:	6541      	str	r1, [r0, #84]	; 0x54
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e7e4      	b.n	80012a6 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	f042 0208 	orr.w	r2, r2, #8
 80012e2:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80012e4:	2002      	movs	r0, #2
 80012e6:	bd10      	pop	{r4, pc}

080012e8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80012e8:	6802      	ldr	r2, [r0, #0]
 80012ea:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80012ec:	6811      	ldr	r1, [r2, #0]
{
 80012ee:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80012f0:	f013 050f 	ands.w	r5, r3, #15
{
 80012f4:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80012f6:	d107      	bne.n	8001308 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012f8:	069e      	lsls	r6, r3, #26
 80012fa:	d505      	bpl.n	8001308 <HAL_UART_IRQHandler+0x20>
 80012fc:	068e      	lsls	r6, r1, #26
 80012fe:	d503      	bpl.n	8001308 <HAL_UART_IRQHandler+0x20>
}
 8001300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001304:	f7ff bfba 	b.w	800127c <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8001308:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800130a:	2d00      	cmp	r5, #0
 800130c:	d05c      	beq.n	80013c8 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800130e:	f010 0501 	ands.w	r5, r0, #1
 8001312:	d102      	bne.n	800131a <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001314:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001318:	d056      	beq.n	80013c8 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800131a:	07d8      	lsls	r0, r3, #31
 800131c:	d507      	bpl.n	800132e <HAL_UART_IRQHandler+0x46>
 800131e:	05ce      	lsls	r6, r1, #23
 8001320:	d505      	bpl.n	800132e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001322:	2001      	movs	r0, #1
 8001324:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001326:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001328:	f040 0001 	orr.w	r0, r0, #1
 800132c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800132e:	0798      	lsls	r0, r3, #30
 8001330:	d506      	bpl.n	8001340 <HAL_UART_IRQHandler+0x58>
 8001332:	b12d      	cbz	r5, 8001340 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001334:	2002      	movs	r0, #2
 8001336:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001338:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800133a:	f040 0004 	orr.w	r0, r0, #4
 800133e:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001340:	075e      	lsls	r6, r3, #29
 8001342:	d506      	bpl.n	8001352 <HAL_UART_IRQHandler+0x6a>
 8001344:	b12d      	cbz	r5, 8001352 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001346:	2004      	movs	r0, #4
 8001348:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800134a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800134c:	f040 0002 	orr.w	r0, r0, #2
 8001350:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001352:	0718      	lsls	r0, r3, #28
 8001354:	d507      	bpl.n	8001366 <HAL_UART_IRQHandler+0x7e>
 8001356:	068e      	lsls	r6, r1, #26
 8001358:	d400      	bmi.n	800135c <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800135a:	b125      	cbz	r5, 8001366 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800135c:	2008      	movs	r0, #8
 800135e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001360:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001362:	4302      	orrs	r2, r0
 8001364:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001366:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001368:	2a00      	cmp	r2, #0
 800136a:	d050      	beq.n	800140e <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800136c:	0698      	lsls	r0, r3, #26
 800136e:	d504      	bpl.n	800137a <HAL_UART_IRQHandler+0x92>
 8001370:	068a      	lsls	r2, r1, #26
 8001372:	d502      	bpl.n	800137a <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff ff81 	bl	800127c <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800137a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800137c:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 800137e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001380:	d404      	bmi.n	800138c <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001386:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800138a:	d019      	beq.n	80013c0 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 800138c:	f7ff fd0e 	bl	8000dac <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	0656      	lsls	r6, r2, #25
 8001396:	d50f      	bpl.n	80013b8 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001398:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800139a:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800139c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013a0:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80013a2:	b148      	cbz	r0, 80013b8 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_UART_IRQHandler+0x128>)
 80013a6:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013a8:	f7ff f83d 	bl	8000426 <HAL_DMA_Abort_IT>
 80013ac:	b378      	cbz	r0, 800140e <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013ae:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80013b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80013b6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff fd60 	bl	8000e7e <HAL_UART_ErrorCallback>
 80013be:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80013c0:	f7ff fd5d 	bl	8000e7e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013c4:	66e5      	str	r5, [r4, #108]	; 0x6c
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80013c8:	02dd      	lsls	r5, r3, #11
 80013ca:	d50e      	bpl.n	80013ea <HAL_UART_IRQHandler+0x102>
 80013cc:	0246      	lsls	r6, r0, #9
 80013ce:	d50c      	bpl.n	80013ea <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80013d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013d4:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80013d6:	2320      	movs	r3, #32
 80013d8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80013dc:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80013de:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80013e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80013e6:	f000 b815 	b.w	8001414 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013ea:	061d      	lsls	r5, r3, #24
 80013ec:	d506      	bpl.n	80013fc <HAL_UART_IRQHandler+0x114>
 80013ee:	0608      	lsls	r0, r1, #24
 80013f0:	d504      	bpl.n	80013fc <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 80013f2:	4620      	mov	r0, r4
}
 80013f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 80013f8:	f7ff bf05 	b.w	8001206 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80013fc:	065a      	lsls	r2, r3, #25
 80013fe:	d506      	bpl.n	800140e <HAL_UART_IRQHandler+0x126>
 8001400:	064b      	lsls	r3, r1, #25
 8001402:	d504      	bpl.n	800140e <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8001404:	4620      	mov	r0, r4
}
 8001406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 800140a:	f7ff bf2a 	b.w	8001262 <UART_EndTransmit_IT>
 800140e:	bd70      	pop	{r4, r5, r6, pc}
 8001410:	08000ed5 	.word	0x08000ed5

08001414 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001414:	4770      	bx	lr

08001416 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001416:	b510      	push	{r4, lr}
 8001418:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141a:	2302      	movs	r3, #2
 800141c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141e:	2301      	movs	r3, #1
 8001420:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001422:	2310      	movs	r3, #16
 8001424:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001426:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001428:	2300      	movs	r3, #0
 800142a:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f7ff f922 	bl	8000674 <HAL_RCC_OscConfig>
 8001430:	4601      	mov	r1, r0
 8001432:	b100      	cbz	r0, 8001436 <SystemClock_Config+0x20>
 8001434:	e7fe      	b.n	8001434 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001438:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800143c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143e:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001440:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001444:	f7ff fbba 	bl	8000bbc <HAL_RCC_ClockConfig>
 8001448:	4604      	mov	r4, r0
 800144a:	b100      	cbz	r0, 800144e <SystemClock_Config+0x38>
 800144c:	e7fe      	b.n	800144c <SystemClock_Config+0x36>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800144e:	f7ff fc77 	bl	8000d40 <HAL_RCC_GetHCLKFreq>
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	fbb0 f0f3 	udiv	r0, r0, r3
 800145a:	f7fe ff4b 	bl	80002f4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800145e:	2004      	movs	r0, #4
 8001460:	f7fe ff5e 	bl	8000320 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001464:	4622      	mov	r2, r4
 8001466:	4621      	mov	r1, r4
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7fe ff02 	bl	8000274 <HAL_NVIC_SetPriority>
}
 8001470:	b010      	add	sp, #64	; 0x40
 8001472:	bd10      	pop	{r4, pc}

08001474 <main>:
{
 8001474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_Init();
 8001476:	f7fe febb 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 800147a:	f7ff ffcc 	bl	8001416 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <main+0x94>)
  huart2.Instance = USART2;
 8001480:	4c22      	ldr	r4, [pc, #136]	; (800150c <main+0x98>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001488:	615a      	str	r2, [r3, #20]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001490:	9202      	str	r2, [sp, #8]
 8001492:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014a2:	9203      	str	r2, [sp, #12]
 80014a4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	695a      	ldr	r2, [r3, #20]
 80014a8:	f042 0201 	orr.w	r2, r2, #1
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014b2:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80014b6:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014b8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80014ba:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014bc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80014be:	f7fe fed9 	bl	8000274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014c2:	2011      	movs	r0, #17
 80014c4:	f7fe ff0a 	bl	80002dc <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 9600;
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <main+0x9c>)
 80014ca:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Init.Parity = UART_PARITY_EVEN;
 80014ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
  huart2.Init.BaudRate = 9600;
 80014d2:	e884 0009 	stmia.w	r4, {r0, r3}
  huart2.Init.Parity = UART_PARITY_EVEN;
 80014d6:	6122      	str	r2, [r4, #16]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d8:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014da:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014dc:	4620      	mov	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e0:	60e3      	str	r3, [r4, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e2:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e4:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e6:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e8:	6223      	str	r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ea:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ec:	f7ff fe59 	bl	80011a2 <HAL_UART_Init>
 80014f0:	b948      	cbnz	r0, 8001506 <main+0x92>
	  HAL_UART_Transmit_DMA(&huart2,buffer,10);
 80014f2:	4d08      	ldr	r5, [pc, #32]	; (8001514 <main+0xa0>)
 80014f4:	220a      	movs	r2, #10
 80014f6:	4629      	mov	r1, r5
 80014f8:	4620      	mov	r0, r4
 80014fa:	f7ff fc65 	bl	8000dc8 <HAL_UART_Transmit_DMA>
	  HAL_Delay(200);
 80014fe:	20c8      	movs	r0, #200	; 0xc8
 8001500:	f7fe fe96 	bl	8000230 <HAL_Delay>
 8001504:	e7f6      	b.n	80014f4 <main+0x80>
 8001506:	e7fe      	b.n	8001506 <main+0x92>
 8001508:	40021000 	.word	0x40021000
 800150c:	20000074 	.word	0x20000074
 8001510:	40004400 	.word	0x40004400
 8001514:	20000000 	.word	0x20000000

08001518 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001518:	e7fe      	b.n	8001518 <_Error_Handler>
	...

0800151c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_MspInit+0x88>)
{
 800151e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001534:	f7fe fe8c 	bl	8000250 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	4611      	mov	r1, r2
 800153c:	f06f 000b 	mvn.w	r0, #11
 8001540:	f7fe fe98 	bl	8000274 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	4611      	mov	r1, r2
 8001548:	f06f 000a 	mvn.w	r0, #10
 800154c:	f7fe fe92 	bl	8000274 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	4611      	mov	r1, r2
 8001554:	f06f 0009 	mvn.w	r0, #9
 8001558:	f7fe fe8c 	bl	8000274 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	4611      	mov	r1, r2
 8001560:	f06f 0004 	mvn.w	r0, #4
 8001564:	f7fe fe86 	bl	8000274 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	4611      	mov	r1, r2
 800156c:	f06f 0003 	mvn.w	r0, #3
 8001570:	f7fe fe80 	bl	8000274 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	4611      	mov	r1, r2
 8001578:	f06f 0001 	mvn.w	r0, #1
 800157c:	f7fe fe7a 	bl	8000274 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	4611      	mov	r1, r2
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7fe fe74 	bl	8000274 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	4611      	mov	r1, r2
 8001590:	2005      	movs	r0, #5
 8001592:	f7fe fe6f 	bl	8000274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001596:	2005      	movs	r0, #5
 8001598:	f7fe fea0 	bl	80002dc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159c:	b003      	add	sp, #12
 800159e:	f85d fb04 	ldr.w	pc, [sp], #4
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80015aa:	6802      	ldr	r2, [r0, #0]
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_UART_MspInit+0x84>)
 80015ae:	429a      	cmp	r2, r3
{
 80015b0:	b086      	sub	sp, #24
 80015b2:	4606      	mov	r6, r0
  if(huart->Instance==USART2)
 80015b4:	d138      	bne.n	8001628 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b6:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80015bc:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80015be:	4c1c      	ldr	r4, [pc, #112]	; (8001630 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015c4:	61da      	str	r2, [r3, #28]
 80015c6:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	9503      	str	r5, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80015d2:	f248 0304 	movw	r3, #32772	; 0x8004
 80015d6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f7fe ff89 	bl	8000500 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ee:	4a11      	ldr	r2, [pc, #68]	; (8001634 <HAL_UART_MspInit+0x8c>)
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f0:	60a5      	str	r5, [r4, #8]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f2:	2310      	movs	r3, #16
 80015f4:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015f8:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015fe:	6125      	str	r5, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001600:	6165      	str	r5, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001602:	61a5      	str	r5, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001604:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001606:	f7fe fe9d 	bl	8000344 <HAL_DMA_Init>
 800160a:	b118      	cbz	r0, 8001614 <HAL_UART_MspInit+0x6c>
    {
      _Error_Handler(__FILE__, __LINE__);
 800160c:	217a      	movs	r1, #122	; 0x7a
 800160e:	480a      	ldr	r0, [pc, #40]	; (8001638 <HAL_UART_MspInit+0x90>)
 8001610:	f7ff ff82 	bl	8001518 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001618:	6634      	str	r4, [r6, #96]	; 0x60
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800161a:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800161c:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800161e:	f7fe fe29 	bl	8000274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001622:	2026      	movs	r0, #38	; 0x26
 8001624:	f7fe fe5a 	bl	80002dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001628:	b006      	add	sp, #24
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	40004400 	.word	0x40004400
 8001630:	20000030 	.word	0x20000030
 8001634:	40020080 	.word	0x40020080
 8001638:	080017a4 	.word	0x080017a4

0800163c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800163c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f7fe fde9 	bl	8000214 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001646:	f7fe be78 	b.w	800033a <HAL_SYSTICK_IRQHandler>

0800164a <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 800164a:	4770      	bx	lr

0800164c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800164c:	4801      	ldr	r0, [pc, #4]	; (8001654 <DMA1_Channel7_IRQHandler+0x8>)
 800164e:	f7fe bf0e 	b.w	800046e <HAL_DMA_IRQHandler>
 8001652:	bf00      	nop
 8001654:	20000030 	.word	0x20000030

08001658 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001658:	4801      	ldr	r0, [pc, #4]	; (8001660 <USART2_IRQHandler+0x8>)
 800165a:	f7ff be45 	b.w	80012e8 <HAL_UART_IRQHandler>
 800165e:	bf00      	nop
 8001660:	20000074 	.word	0x20000074

08001664 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4915      	ldr	r1, [pc, #84]	; (80016bc <SystemInit+0x58>)
 8001666:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800166a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800166e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <SystemInit+0x5c>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800167c:	6858      	ldr	r0, [r3, #4]
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <SystemInit+0x60>)
 8001680:	4002      	ands	r2, r0
 8001682:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800168a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800168e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001696:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800169e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80016a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a2:	f022 020f 	bic.w	r2, r2, #15
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80016a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SystemInit+0x64>)
 80016ac:	4002      	ands	r2, r0
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016b8:	608b      	str	r3, [r1, #8]
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	f87fc00c 	.word	0xf87fc00c
 80016c8:	ff00fccc 	.word	0xff00fccc

080016cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016d2:	e003      	b.n	80016dc <LoopCopyDataInit>

080016d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016da:	3104      	adds	r1, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <LoopForever+0xa>)
	ldr	r3, =_edata
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016e4:	d3f6      	bcc.n	80016d4 <CopyDataInit>
	ldr	r2, =_sbss
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016e8:	e002      	b.n	80016f0 <LoopFillZerobss>

080016ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016ec:	f842 3b04 	str.w	r3, [r2], #4

080016f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <LoopForever+0x16>)
	cmp	r2, r3
 80016f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016f4:	d3f9      	bcc.n	80016ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016f6:	f7ff ffb5 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f000 f811 	bl	8001720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fe:	f7ff feb9 	bl	8001474 <main>

08001702 <LoopForever>:

LoopForever:
    b LoopForever
 8001702:	e7fe      	b.n	8001702 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001704:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001708:	080017e0 	.word	0x080017e0
	ldr	r0, =_sdata
 800170c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001710:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001714:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001718:	200000e4 	.word	0x200000e4

0800171c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_2_IRQHandler>
	...

08001720 <__libc_init_array>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	4e0d      	ldr	r6, [pc, #52]	; (8001758 <__libc_init_array+0x38>)
 8001724:	4c0d      	ldr	r4, [pc, #52]	; (800175c <__libc_init_array+0x3c>)
 8001726:	1ba4      	subs	r4, r4, r6
 8001728:	10a4      	asrs	r4, r4, #2
 800172a:	2500      	movs	r5, #0
 800172c:	42a5      	cmp	r5, r4
 800172e:	d109      	bne.n	8001744 <__libc_init_array+0x24>
 8001730:	4e0b      	ldr	r6, [pc, #44]	; (8001760 <__libc_init_array+0x40>)
 8001732:	4c0c      	ldr	r4, [pc, #48]	; (8001764 <__libc_init_array+0x44>)
 8001734:	f000 f818 	bl	8001768 <_init>
 8001738:	1ba4      	subs	r4, r4, r6
 800173a:	10a4      	asrs	r4, r4, #2
 800173c:	2500      	movs	r5, #0
 800173e:	42a5      	cmp	r5, r4
 8001740:	d105      	bne.n	800174e <__libc_init_array+0x2e>
 8001742:	bd70      	pop	{r4, r5, r6, pc}
 8001744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001748:	4798      	blx	r3
 800174a:	3501      	adds	r5, #1
 800174c:	e7ee      	b.n	800172c <__libc_init_array+0xc>
 800174e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001752:	4798      	blx	r3
 8001754:	3501      	adds	r5, #1
 8001756:	e7f2      	b.n	800173e <__libc_init_array+0x1e>
 8001758:	080017d8 	.word	0x080017d8
 800175c:	080017d8 	.word	0x080017d8
 8001760:	080017d8 	.word	0x080017d8
 8001764:	080017dc 	.word	0x080017dc

08001768 <_init>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr

08001774 <_fini>:
 8001774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001776:	bf00      	nop
 8001778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800177a:	bc08      	pop	{r3}
 800177c:	469e      	mov	lr, r3
 800177e:	4770      	bx	lr
