
UARTLED-Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000140c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08001594  08001594  00011594  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800174c  0800174c  0001174c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001750  08001750  00011750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d4  20000000  08001754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
  7 .bss          00000090  200001d4  200001d4  000201d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000264  20000264  000201d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b0fb  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000182d  00000000  00000000  0002b2ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002789  00000000  00000000  0002cb2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000004b8  00000000  00000000  0002f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006e0  00000000  00000000  0002f770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002ebe  00000000  00000000  0002fe50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002031  00000000  00000000  00032d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00034d3f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000d68  00000000  00000000  00034dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d4 	.word	0x200001d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800157c 	.word	0x0800157c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d8 	.word	0x200001d8
 80001c4:	0800157c 	.word	0x0800157c

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f870 	bl	80002bc <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f836 	bl	8000254 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4a07      	ldr	r2, [pc, #28]	; (8000210 <HAL_Init+0x20>)
{
 80001f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 f817 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffe0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000208:	f001 f80e 	bl	8001228 <HAL_MspInit>
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40022000 	.word	0x40022000

08000214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	200001f0 	.word	0x200001f0

08000224 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	200001f0 	.word	0x200001f0

08000230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000232:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000238:	041b      	lsls	r3, r3, #16
 800023a:	0c1b      	lsrs	r3, r3, #16
 800023c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000240:	0200      	lsls	r0, r0, #8
 8000242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000246:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800024a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800024c:	60d3      	str	r3, [r2, #12]
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000256:	b530      	push	{r4, r5, lr}
 8000258:	68dc      	ldr	r4, [r3, #12]
 800025a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000264:	2b04      	cmp	r3, #4
 8000266:	bf28      	it	cs
 8000268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	f04f 0501 	mov.w	r5, #1
 8000270:	fa05 f303 	lsl.w	r3, r5, r3
 8000274:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	bf8c      	ite	hi
 800027a:	3c03      	subhi	r4, #3
 800027c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027e:	4019      	ands	r1, r3
 8000280:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000282:	fa05 f404 	lsl.w	r4, r5, r4
 8000286:	3c01      	subs	r4, #1
 8000288:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800028a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028c:	ea42 0201 	orr.w	r2, r2, r1
 8000290:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	bfaf      	iteee	ge
 8000296:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	f000 000f 	andlt.w	r0, r0, #15
 800029e:	4b06      	ldrlt	r3, [pc, #24]	; (80002b8 <HAL_NVIC_SetPriority+0x64>)
 80002a0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	bfa5      	ittet	ge
 80002a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002b0:	bd30      	pop	{r4, r5, pc}
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000ed14 	.word	0xe000ed14

080002bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002bc:	3801      	subs	r0, #1
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d20a      	bcs.n	80002da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c6:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	21f0      	movs	r1, #240	; 0xf0
 80002cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e010 	.word	0xe000e010
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002ea:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ec:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002ee:	bf0c      	ite	eq
 80002f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002f4:	f022 0204 	bicne.w	r2, r2, #4
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	4770      	bx	lr
 80002fc:	e000e010 	.word	0xe000e010

08000300 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000300:	4770      	bx	lr

08000302 <HAL_SYSTICK_IRQHandler>:
{
 8000302:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000304:	f7ff fffc 	bl	8000300 <HAL_SYSTICK_Callback>
 8000308:	bd08      	pop	{r3, pc}
	...

0800030c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800030c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000310:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000312:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000314:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800047c <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000318:	4a56      	ldr	r2, [pc, #344]	; (8000474 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800031a:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800031c:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000320:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000322:	9c01      	ldr	r4, [sp, #4]
 8000324:	40dc      	lsrs	r4, r3
 8000326:	d102      	bne.n	800032e <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000328:	b005      	add	sp, #20
 800032a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800032e:	2401      	movs	r4, #1
 8000330:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000334:	9c01      	ldr	r4, [sp, #4]
 8000336:	ea14 050a 	ands.w	r5, r4, sl
 800033a:	f000 8093 	beq.w	8000464 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800033e:	684c      	ldr	r4, [r1, #4]
 8000340:	f024 0b10 	bic.w	fp, r4, #16
 8000344:	f1bb 0f02 	cmp.w	fp, #2
 8000348:	d111      	bne.n	800036e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800034a:	08df      	lsrs	r7, r3, #3
 800034c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000350:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000354:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000356:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800035a:	fa09 fc0e 	lsl.w	ip, r9, lr
 800035e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000362:	690e      	ldr	r6, [r1, #16]
 8000364:	fa06 f60e 	lsl.w	r6, r6, lr
 8000368:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 800036c:	623e      	str	r6, [r7, #32]
 800036e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000372:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000374:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000376:	fa07 f70c 	lsl.w	r7, r7, ip
 800037a:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800037c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000380:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000382:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000386:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800038a:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800038e:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000392:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000394:	d811      	bhi.n	80003ba <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000396:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000398:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800039c:	68ce      	ldr	r6, [r1, #12]
 800039e:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003a2:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003a6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003a8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003aa:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ae:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003b2:	409e      	lsls	r6, r3
 80003b4:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003b8:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003ba:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003bc:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003be:	688e      	ldr	r6, [r1, #8]
 80003c0:	fa06 f60c 	lsl.w	r6, r6, ip
 80003c4:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003c6:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80003c8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003ca:	d54b      	bpl.n	8000464 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003cc:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003d0:	f046 0601 	orr.w	r6, r6, #1
 80003d4:	f8c8 6018 	str.w	r6, [r8, #24]
 80003d8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003dc:	f023 0703 	bic.w	r7, r3, #3
 80003e0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003e4:	f006 0601 	and.w	r6, r6, #1
 80003e8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80003ec:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003ee:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80003f4:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80003fa:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80003fe:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000402:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000406:	d02f      	beq.n	8000468 <HAL_GPIO_Init+0x15c>
 8000408:	4e1b      	ldr	r6, [pc, #108]	; (8000478 <HAL_GPIO_Init+0x16c>)
 800040a:	42b0      	cmp	r0, r6
 800040c:	d02e      	beq.n	800046c <HAL_GPIO_Init+0x160>
 800040e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000412:	42b0      	cmp	r0, r6
 8000414:	d02c      	beq.n	8000470 <HAL_GPIO_Init+0x164>
 8000416:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800041a:	42b0      	cmp	r0, r6
 800041c:	bf14      	ite	ne
 800041e:	2605      	movne	r6, #5
 8000420:	2603      	moveq	r6, #3
 8000422:	fa06 f60e 	lsl.w	r6, r6, lr
 8000426:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800042a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800042c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800042e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000430:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000434:	bf0c      	ite	eq
 8000436:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000438:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800043a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800043c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800043e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000442:	bf0c      	ite	eq
 8000444:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000446:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000448:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800044a:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800044c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000450:	bf0c      	ite	eq
 8000452:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000454:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000456:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000458:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800045a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800045c:	bf54      	ite	pl
 800045e:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000460:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000462:	60d6      	str	r6, [r2, #12]
    position++;
 8000464:	3301      	adds	r3, #1
 8000466:	e75c      	b.n	8000322 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000468:	2600      	movs	r6, #0
 800046a:	e7da      	b.n	8000422 <HAL_GPIO_Init+0x116>
 800046c:	2601      	movs	r6, #1
 800046e:	e7d8      	b.n	8000422 <HAL_GPIO_Init+0x116>
 8000470:	2602      	movs	r6, #2
 8000472:	e7d6      	b.n	8000422 <HAL_GPIO_Init+0x116>
 8000474:	40010400 	.word	0x40010400
 8000478:	48000400 	.word	0x48000400
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000480:	b10a      	cbz	r2, 8000486 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000482:	6181      	str	r1, [r0, #24]
 8000484:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000486:	6281      	str	r1, [r0, #40]	; 0x28
 8000488:	4770      	bx	lr
	...

0800048c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800048c:	6803      	ldr	r3, [r0, #0]
 800048e:	07da      	lsls	r2, r3, #31
{
 8000490:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000494:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000496:	d411      	bmi.n	80004bc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000498:	682b      	ldr	r3, [r5, #0]
 800049a:	079b      	lsls	r3, r3, #30
 800049c:	f100 8088 	bmi.w	80005b0 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004a0:	682b      	ldr	r3, [r5, #0]
 80004a2:	071c      	lsls	r4, r3, #28
 80004a4:	f100 80f8 	bmi.w	8000698 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004a8:	682b      	ldr	r3, [r5, #0]
 80004aa:	0758      	lsls	r0, r3, #29
 80004ac:	f100 8141 	bmi.w	8000732 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004b0:	69ea      	ldr	r2, [r5, #28]
 80004b2:	2a00      	cmp	r2, #0
 80004b4:	f040 81d7 	bne.w	8000866 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004b8:	2000      	movs	r0, #0
 80004ba:	e021      	b.n	8000500 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004bc:	4cba      	ldr	r4, [pc, #744]	; (80007a8 <HAL_RCC_OscConfig+0x31c>)
 80004be:	6863      	ldr	r3, [r4, #4]
 80004c0:	f003 030c 	and.w	r3, r3, #12
 80004c4:	2b04      	cmp	r3, #4
 80004c6:	d007      	beq.n	80004d8 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004c8:	6863      	ldr	r3, [r4, #4]
 80004ca:	f003 030c 	and.w	r3, r3, #12
 80004ce:	2b08      	cmp	r3, #8
 80004d0:	d119      	bne.n	8000506 <HAL_RCC_OscConfig+0x7a>
 80004d2:	6863      	ldr	r3, [r4, #4]
 80004d4:	03df      	lsls	r7, r3, #15
 80004d6:	d516      	bpl.n	8000506 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004dc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004e0:	6821      	ldr	r1, [r4, #0]
 80004e2:	fa93 f3a3 	rbit	r3, r3
 80004e6:	fab3 f383 	clz	r3, r3
 80004ea:	f003 031f 	and.w	r3, r3, #31
 80004ee:	2201      	movs	r2, #1
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	420b      	tst	r3, r1
 80004f6:	d0cf      	beq.n	8000498 <HAL_RCC_OscConfig+0xc>
 80004f8:	686b      	ldr	r3, [r5, #4]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d1cc      	bne.n	8000498 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004fe:	2001      	movs	r0, #1
}
 8000500:	b002      	add	sp, #8
 8000502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000506:	686a      	ldr	r2, [r5, #4]
 8000508:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800050c:	d125      	bne.n	800055a <HAL_RCC_OscConfig+0xce>
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000514:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000516:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000518:	68a9      	ldr	r1, [r5, #8]
 800051a:	f023 030f 	bic.w	r3, r3, #15
 800051e:	430b      	orrs	r3, r1
 8000520:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000522:	b352      	cbz	r2, 800057a <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000524:	f7ff fe7e 	bl	8000224 <HAL_GetTick>
 8000528:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800052c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800052e:	2701      	movs	r7, #1
 8000530:	fa96 f3a6 	rbit	r3, r6
 8000534:	6822      	ldr	r2, [r4, #0]
 8000536:	fa96 f3a6 	rbit	r3, r6
 800053a:	fab3 f383 	clz	r3, r3
 800053e:	f003 031f 	and.w	r3, r3, #31
 8000542:	fa07 f303 	lsl.w	r3, r7, r3
 8000546:	4213      	tst	r3, r2
 8000548:	d1a6      	bne.n	8000498 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800054a:	f7ff fe6b 	bl	8000224 <HAL_GetTick>
 800054e:	eba0 0008 	sub.w	r0, r0, r8
 8000552:	2864      	cmp	r0, #100	; 0x64
 8000554:	d9ec      	bls.n	8000530 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000556:	2003      	movs	r0, #3
 8000558:	e7d2      	b.n	8000500 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	b932      	cbnz	r2, 800056c <HAL_RCC_OscConfig+0xe0>
 800055e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000562:	6023      	str	r3, [r4, #0]
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800056a:	e7d3      	b.n	8000514 <HAL_RCC_OscConfig+0x88>
 800056c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000570:	d1f5      	bne.n	800055e <HAL_RCC_OscConfig+0xd2>
 8000572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000576:	6023      	str	r3, [r4, #0]
 8000578:	e7c9      	b.n	800050e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800057a:	f7ff fe53 	bl	8000224 <HAL_GetTick>
 800057e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000582:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000584:	2701      	movs	r7, #1
 8000586:	fa96 f3a6 	rbit	r3, r6
 800058a:	6822      	ldr	r2, [r4, #0]
 800058c:	fa96 f3a6 	rbit	r3, r6
 8000590:	fab3 f383 	clz	r3, r3
 8000594:	f003 031f 	and.w	r3, r3, #31
 8000598:	fa07 f303 	lsl.w	r3, r7, r3
 800059c:	4213      	tst	r3, r2
 800059e:	f43f af7b 	beq.w	8000498 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005a2:	f7ff fe3f 	bl	8000224 <HAL_GetTick>
 80005a6:	eba0 0008 	sub.w	r0, r0, r8
 80005aa:	2864      	cmp	r0, #100	; 0x64
 80005ac:	d9eb      	bls.n	8000586 <HAL_RCC_OscConfig+0xfa>
 80005ae:	e7d2      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005b0:	4c7d      	ldr	r4, [pc, #500]	; (80007a8 <HAL_RCC_OscConfig+0x31c>)
 80005b2:	6863      	ldr	r3, [r4, #4]
 80005b4:	f013 0f0c 	tst.w	r3, #12
 80005b8:	d007      	beq.n	80005ca <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005ba:	6863      	ldr	r3, [r4, #4]
 80005bc:	f003 030c 	and.w	r3, r3, #12
 80005c0:	2b08      	cmp	r3, #8
 80005c2:	d121      	bne.n	8000608 <HAL_RCC_OscConfig+0x17c>
 80005c4:	6863      	ldr	r3, [r4, #4]
 80005c6:	03de      	lsls	r6, r3, #15
 80005c8:	d41e      	bmi.n	8000608 <HAL_RCC_OscConfig+0x17c>
 80005ca:	2302      	movs	r3, #2
 80005cc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005d0:	6821      	ldr	r1, [r4, #0]
 80005d2:	fa93 f3a3 	rbit	r3, r3
 80005d6:	fab3 f383 	clz	r3, r3
 80005da:	f003 031f 	and.w	r3, r3, #31
 80005de:	2201      	movs	r2, #1
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	420b      	tst	r3, r1
 80005e6:	d002      	beq.n	80005ee <HAL_RCC_OscConfig+0x162>
 80005e8:	692b      	ldr	r3, [r5, #16]
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d187      	bne.n	80004fe <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005ee:	6821      	ldr	r1, [r4, #0]
 80005f0:	23f8      	movs	r3, #248	; 0xf8
 80005f2:	fa93 f3a3 	rbit	r3, r3
 80005f6:	fab3 f283 	clz	r2, r3
 80005fa:	696b      	ldr	r3, [r5, #20]
 80005fc:	4093      	lsls	r3, r2
 80005fe:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000602:	4313      	orrs	r3, r2
 8000604:	6023      	str	r3, [r4, #0]
 8000606:	e74b      	b.n	80004a0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000608:	692a      	ldr	r2, [r5, #16]
 800060a:	2601      	movs	r6, #1
 800060c:	b30a      	cbz	r2, 8000652 <HAL_RCC_OscConfig+0x1c6>
 800060e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000612:	fab3 f383 	clz	r3, r3
 8000616:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800061a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	2702      	movs	r7, #2
 8000622:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000624:	f7ff fdfe 	bl	8000224 <HAL_GetTick>
 8000628:	4680      	mov	r8, r0
 800062a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800062e:	6822      	ldr	r2, [r4, #0]
 8000630:	fa97 f3a7 	rbit	r3, r7
 8000634:	fab3 f383 	clz	r3, r3
 8000638:	f003 031f 	and.w	r3, r3, #31
 800063c:	fa06 f303 	lsl.w	r3, r6, r3
 8000640:	4213      	tst	r3, r2
 8000642:	d1d4      	bne.n	80005ee <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000644:	f7ff fdee 	bl	8000224 <HAL_GetTick>
 8000648:	eba0 0008 	sub.w	r0, r0, r8
 800064c:	2802      	cmp	r0, #2
 800064e:	d9ec      	bls.n	800062a <HAL_RCC_OscConfig+0x19e>
 8000650:	e781      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
 8000652:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000656:	fab3 f383 	clz	r3, r3
 800065a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800065e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	2702      	movs	r7, #2
 8000666:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000668:	f7ff fddc 	bl	8000224 <HAL_GetTick>
 800066c:	4680      	mov	r8, r0
 800066e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000672:	6822      	ldr	r2, [r4, #0]
 8000674:	fa97 f3a7 	rbit	r3, r7
 8000678:	fab3 f383 	clz	r3, r3
 800067c:	f003 031f 	and.w	r3, r3, #31
 8000680:	fa06 f303 	lsl.w	r3, r6, r3
 8000684:	4213      	tst	r3, r2
 8000686:	f43f af0b 	beq.w	80004a0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068a:	f7ff fdcb 	bl	8000224 <HAL_GetTick>
 800068e:	eba0 0008 	sub.w	r0, r0, r8
 8000692:	2802      	cmp	r0, #2
 8000694:	d9eb      	bls.n	800066e <HAL_RCC_OscConfig+0x1e2>
 8000696:	e75e      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000698:	69aa      	ldr	r2, [r5, #24]
 800069a:	4e43      	ldr	r6, [pc, #268]	; (80007a8 <HAL_RCC_OscConfig+0x31c>)
 800069c:	4943      	ldr	r1, [pc, #268]	; (80007ac <HAL_RCC_OscConfig+0x320>)
 800069e:	2401      	movs	r4, #1
 80006a0:	b31a      	cbz	r2, 80006ea <HAL_RCC_OscConfig+0x25e>
 80006a2:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006a6:	fab3 f383 	clz	r3, r3
 80006aa:	440b      	add	r3, r1
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	2702      	movs	r7, #2
 80006b0:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80006b2:	f7ff fdb7 	bl	8000224 <HAL_GetTick>
 80006b6:	4680      	mov	r8, r0
 80006b8:	fa97 f3a7 	rbit	r3, r7
 80006bc:	fa97 f3a7 	rbit	r3, r7
 80006c0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006c4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80006c6:	fa97 f3a7 	rbit	r3, r7
 80006ca:	fab3 f383 	clz	r3, r3
 80006ce:	f003 031f 	and.w	r3, r3, #31
 80006d2:	fa04 f303 	lsl.w	r3, r4, r3
 80006d6:	4213      	tst	r3, r2
 80006d8:	f47f aee6 	bne.w	80004a8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006dc:	f7ff fda2 	bl	8000224 <HAL_GetTick>
 80006e0:	eba0 0008 	sub.w	r0, r0, r8
 80006e4:	2802      	cmp	r0, #2
 80006e6:	d9e7      	bls.n	80006b8 <HAL_RCC_OscConfig+0x22c>
 80006e8:	e735      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
 80006ea:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80006ee:	fab3 f383 	clz	r3, r3
 80006f2:	440b      	add	r3, r1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	2702      	movs	r7, #2
 80006f8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006fa:	f7ff fd93 	bl	8000224 <HAL_GetTick>
 80006fe:	4680      	mov	r8, r0
 8000700:	fa97 f3a7 	rbit	r3, r7
 8000704:	fa97 f3a7 	rbit	r3, r7
 8000708:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800070c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800070e:	fa97 f3a7 	rbit	r3, r7
 8000712:	fab3 f383 	clz	r3, r3
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	fa04 f303 	lsl.w	r3, r4, r3
 800071e:	4213      	tst	r3, r2
 8000720:	f43f aec2 	beq.w	80004a8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000724:	f7ff fd7e 	bl	8000224 <HAL_GetTick>
 8000728:	eba0 0008 	sub.w	r0, r0, r8
 800072c:	2802      	cmp	r0, #2
 800072e:	d9e7      	bls.n	8000700 <HAL_RCC_OscConfig+0x274>
 8000730:	e711      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000732:	4c1d      	ldr	r4, [pc, #116]	; (80007a8 <HAL_RCC_OscConfig+0x31c>)
 8000734:	69e3      	ldr	r3, [r4, #28]
 8000736:	00d9      	lsls	r1, r3, #3
 8000738:	d434      	bmi.n	80007a4 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	69e3      	ldr	r3, [r4, #28]
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	61e3      	str	r3, [r4, #28]
 8000742:	69e3      	ldr	r3, [r4, #28]
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800074c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800074e:	4f18      	ldr	r7, [pc, #96]	; (80007b0 <HAL_RCC_OscConfig+0x324>)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	05da      	lsls	r2, r3, #23
 8000754:	d52e      	bpl.n	80007b4 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000756:	68eb      	ldr	r3, [r5, #12]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d13c      	bne.n	80007d6 <HAL_RCC_OscConfig+0x34a>
 800075c:	6a23      	ldr	r3, [r4, #32]
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000764:	f7ff fd5e 	bl	8000224 <HAL_GetTick>
 8000768:	2702      	movs	r7, #2
 800076a:	4682      	mov	sl, r0
 800076c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800076e:	f04f 0801 	mov.w	r8, #1
 8000772:	fa97 f3a7 	rbit	r3, r7
 8000776:	fa97 f3a7 	rbit	r3, r7
 800077a:	2b00      	cmp	r3, #0
 800077c:	d06b      	beq.n	8000856 <HAL_RCC_OscConfig+0x3ca>
 800077e:	6a22      	ldr	r2, [r4, #32]
 8000780:	fa99 f3a9 	rbit	r3, r9
 8000784:	fab3 f383 	clz	r3, r3
 8000788:	f003 031f 	and.w	r3, r3, #31
 800078c:	fa08 f303 	lsl.w	r3, r8, r3
 8000790:	4213      	tst	r3, r2
 8000792:	d057      	beq.n	8000844 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8000794:	2e00      	cmp	r6, #0
 8000796:	f43f ae8b 	beq.w	80004b0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800079a:	69e3      	ldr	r3, [r4, #28]
 800079c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007a0:	61e3      	str	r3, [r4, #28]
 80007a2:	e685      	b.n	80004b0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80007a4:	2600      	movs	r6, #0
 80007a6:	e7d2      	b.n	800074e <HAL_RCC_OscConfig+0x2c2>
 80007a8:	40021000 	.word	0x40021000
 80007ac:	10908120 	.word	0x10908120
 80007b0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80007bc:	f7ff fd32 	bl	8000224 <HAL_GetTick>
 80007c0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	d4c6      	bmi.n	8000756 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007c8:	f7ff fd2c 	bl	8000224 <HAL_GetTick>
 80007cc:	eba0 0008 	sub.w	r0, r0, r8
 80007d0:	2864      	cmp	r0, #100	; 0x64
 80007d2:	d9f6      	bls.n	80007c2 <HAL_RCC_OscConfig+0x336>
 80007d4:	e6bf      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007d6:	bb3b      	cbnz	r3, 8000828 <HAL_RCC_OscConfig+0x39c>
 80007d8:	6a23      	ldr	r3, [r4, #32]
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	6223      	str	r3, [r4, #32]
 80007e0:	6a23      	ldr	r3, [r4, #32]
 80007e2:	f023 0304 	bic.w	r3, r3, #4
 80007e6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007e8:	f7ff fd1c 	bl	8000224 <HAL_GetTick>
 80007ec:	2702      	movs	r7, #2
 80007ee:	4682      	mov	sl, r0
 80007f0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007f2:	f04f 0801 	mov.w	r8, #1
 80007f6:	fa97 f3a7 	rbit	r3, r7
 80007fa:	fa97 f3a7 	rbit	r3, r7
 80007fe:	b373      	cbz	r3, 800085e <HAL_RCC_OscConfig+0x3d2>
 8000800:	6a22      	ldr	r2, [r4, #32]
 8000802:	fa99 f3a9 	rbit	r3, r9
 8000806:	fab3 f383 	clz	r3, r3
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	fa08 f303 	lsl.w	r3, r8, r3
 8000812:	4213      	tst	r3, r2
 8000814:	d0be      	beq.n	8000794 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000816:	f7ff fd05 	bl	8000224 <HAL_GetTick>
 800081a:	f241 3388 	movw	r3, #5000	; 0x1388
 800081e:	eba0 000a 	sub.w	r0, r0, sl
 8000822:	4298      	cmp	r0, r3
 8000824:	d9e7      	bls.n	80007f6 <HAL_RCC_OscConfig+0x36a>
 8000826:	e696      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000828:	2b05      	cmp	r3, #5
 800082a:	6a23      	ldr	r3, [r4, #32]
 800082c:	d103      	bne.n	8000836 <HAL_RCC_OscConfig+0x3aa>
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6223      	str	r3, [r4, #32]
 8000834:	e792      	b.n	800075c <HAL_RCC_OscConfig+0x2d0>
 8000836:	f023 0301 	bic.w	r3, r3, #1
 800083a:	6223      	str	r3, [r4, #32]
 800083c:	6a23      	ldr	r3, [r4, #32]
 800083e:	f023 0304 	bic.w	r3, r3, #4
 8000842:	e78e      	b.n	8000762 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000844:	f7ff fcee 	bl	8000224 <HAL_GetTick>
 8000848:	f241 3388 	movw	r3, #5000	; 0x1388
 800084c:	eba0 000a 	sub.w	r0, r0, sl
 8000850:	4298      	cmp	r0, r3
 8000852:	d98e      	bls.n	8000772 <HAL_RCC_OscConfig+0x2e6>
 8000854:	e67f      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
 8000856:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800085a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800085c:	e790      	b.n	8000780 <HAL_RCC_OscConfig+0x2f4>
 800085e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000862:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000864:	e7cd      	b.n	8000802 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000866:	4c41      	ldr	r4, [pc, #260]	; (800096c <HAL_RCC_OscConfig+0x4e0>)
 8000868:	6863      	ldr	r3, [r4, #4]
 800086a:	f003 030c 	and.w	r3, r3, #12
 800086e:	2b08      	cmp	r3, #8
 8000870:	f43f ae45 	beq.w	80004fe <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000874:	2a02      	cmp	r2, #2
 8000876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800087a:	d152      	bne.n	8000922 <HAL_RCC_OscConfig+0x496>
 800087c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000880:	fab3 f383 	clz	r3, r3
 8000884:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000888:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000892:	f7ff fcc7 	bl	8000224 <HAL_GetTick>
 8000896:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800089a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800089c:	2601      	movs	r6, #1
 800089e:	fa97 f3a7 	rbit	r3, r7
 80008a2:	6822      	ldr	r2, [r4, #0]
 80008a4:	fa97 f3a7 	rbit	r3, r7
 80008a8:	fab3 f383 	clz	r3, r3
 80008ac:	f003 031f 	and.w	r3, r3, #31
 80008b0:	fa06 f303 	lsl.w	r3, r6, r3
 80008b4:	4213      	tst	r3, r2
 80008b6:	d12d      	bne.n	8000914 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008b8:	6862      	ldr	r2, [r4, #4]
 80008ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80008bc:	6a29      	ldr	r1, [r5, #32]
 80008be:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80008c2:	430b      	orrs	r3, r1
 80008c4:	4313      	orrs	r3, r2
 80008c6:	6063      	str	r3, [r4, #4]
 80008c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008cc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80008d0:	fab3 f383 	clz	r3, r3
 80008d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80008e2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80008e4:	f7ff fc9e 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008e8:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80008ea:	4607      	mov	r7, r0
 80008ec:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008f0:	6822      	ldr	r2, [r4, #0]
 80008f2:	fa95 f3a5 	rbit	r3, r5
 80008f6:	fab3 f383 	clz	r3, r3
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	fa06 f303 	lsl.w	r3, r6, r3
 8000902:	4213      	tst	r3, r2
 8000904:	f47f add8 	bne.w	80004b8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000908:	f7ff fc8c 	bl	8000224 <HAL_GetTick>
 800090c:	1bc0      	subs	r0, r0, r7
 800090e:	2802      	cmp	r0, #2
 8000910:	d9ec      	bls.n	80008ec <HAL_RCC_OscConfig+0x460>
 8000912:	e620      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000914:	f7ff fc86 	bl	8000224 <HAL_GetTick>
 8000918:	eba0 0008 	sub.w	r0, r0, r8
 800091c:	2802      	cmp	r0, #2
 800091e:	d9be      	bls.n	800089e <HAL_RCC_OscConfig+0x412>
 8000920:	e619      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
 8000922:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000926:	fab3 f383 	clz	r3, r3
 800092a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800092e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000938:	f7ff fc74 	bl	8000224 <HAL_GetTick>
 800093c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000940:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000942:	2601      	movs	r6, #1
 8000944:	fa95 f3a5 	rbit	r3, r5
 8000948:	6822      	ldr	r2, [r4, #0]
 800094a:	fa95 f3a5 	rbit	r3, r5
 800094e:	fab3 f383 	clz	r3, r3
 8000952:	f003 031f 	and.w	r3, r3, #31
 8000956:	fa06 f303 	lsl.w	r3, r6, r3
 800095a:	4213      	tst	r3, r2
 800095c:	f43f adac 	beq.w	80004b8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000960:	f7ff fc60 	bl	8000224 <HAL_GetTick>
 8000964:	1bc0      	subs	r0, r0, r7
 8000966:	2802      	cmp	r0, #2
 8000968:	d9ec      	bls.n	8000944 <HAL_RCC_OscConfig+0x4b8>
 800096a:	e5f4      	b.n	8000556 <HAL_RCC_OscConfig+0xca>
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000970:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000972:	4c13      	ldr	r4, [pc, #76]	; (80009c0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000974:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000976:	f001 030c 	and.w	r3, r1, #12
 800097a:	2b08      	cmp	r3, #8
 800097c:	d11e      	bne.n	80009bc <HAL_RCC_GetSysClockFreq+0x4c>
 800097e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000982:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000986:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	fa22 f303 	lsr.w	r3, r2, r3
 8000992:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <HAL_RCC_GetSysClockFreq+0x54>)
 8000994:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000996:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000998:	220f      	movs	r2, #15
 800099a:	fa92 f2a2 	rbit	r2, r2
 800099e:	fab2 f282 	clz	r2, r2
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	40d3      	lsrs	r3, r2
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_RCC_GetSysClockFreq+0x58>)
 80009aa:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80009ac:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009ae:	bf4a      	itet	mi
 80009b0:	4b06      	ldrmi	r3, [pc, #24]	; (80009cc <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009b2:	4b07      	ldrpl	r3, [pc, #28]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009b4:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009b8:	4358      	muls	r0, r3
 80009ba:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009be:	bd10      	pop	{r4, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	08001594 	.word	0x08001594
 80009c8:	080015a4 	.word	0x080015a4
 80009cc:	007a1200 	.word	0x007a1200
 80009d0:	003d0900 	.word	0x003d0900

080009d4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009d4:	4a5c      	ldr	r2, [pc, #368]	; (8000b48 <HAL_RCC_ClockConfig+0x174>)
 80009d6:	6813      	ldr	r3, [r2, #0]
 80009d8:	f003 0307 	and.w	r3, r3, #7
 80009dc:	428b      	cmp	r3, r1
{
 80009de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009e2:	4606      	mov	r6, r0
 80009e4:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009e6:	d330      	bcc.n	8000a4a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009e8:	6832      	ldr	r2, [r6, #0]
 80009ea:	0791      	lsls	r1, r2, #30
 80009ec:	d43a      	bmi.n	8000a64 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009ee:	07d2      	lsls	r2, r2, #31
 80009f0:	d440      	bmi.n	8000a74 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80009f2:	4a55      	ldr	r2, [pc, #340]	; (8000b48 <HAL_RCC_ClockConfig+0x174>)
 80009f4:	6813      	ldr	r3, [r2, #0]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	429d      	cmp	r5, r3
 80009fc:	f0c0 8092 	bcc.w	8000b24 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a00:	6832      	ldr	r2, [r6, #0]
 8000a02:	4c52      	ldr	r4, [pc, #328]	; (8000b4c <HAL_RCC_ClockConfig+0x178>)
 8000a04:	f012 0f04 	tst.w	r2, #4
 8000a08:	f040 8097 	bne.w	8000b3a <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a0c:	0713      	lsls	r3, r2, #28
 8000a0e:	d506      	bpl.n	8000a1e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a10:	6863      	ldr	r3, [r4, #4]
 8000a12:	6932      	ldr	r2, [r6, #16]
 8000a14:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a18:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a1c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a1e:	f7ff ffa7 	bl	8000970 <HAL_RCC_GetSysClockFreq>
 8000a22:	6863      	ldr	r3, [r4, #4]
 8000a24:	22f0      	movs	r2, #240	; 0xf0
 8000a26:	fa92 f2a2 	rbit	r2, r2
 8000a2a:	fab2 f282 	clz	r2, r2
 8000a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a32:	40d3      	lsrs	r3, r2
 8000a34:	4a46      	ldr	r2, [pc, #280]	; (8000b50 <HAL_RCC_ClockConfig+0x17c>)
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	40d8      	lsrs	r0, r3
 8000a3a:	4b46      	ldr	r3, [pc, #280]	; (8000b54 <HAL_RCC_ClockConfig+0x180>)
 8000a3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fbc2 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000a44:	2000      	movs	r0, #0
}
 8000a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a4a:	6813      	ldr	r3, [r2, #0]
 8000a4c:	f023 0307 	bic.w	r3, r3, #7
 8000a50:	430b      	orrs	r3, r1
 8000a52:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a54:	6813      	ldr	r3, [r2, #0]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	d0c4      	beq.n	80009e8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000a5e:	2001      	movs	r0, #1
 8000a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a64:	4939      	ldr	r1, [pc, #228]	; (8000b4c <HAL_RCC_ClockConfig+0x178>)
 8000a66:	68b0      	ldr	r0, [r6, #8]
 8000a68:	684b      	ldr	r3, [r1, #4]
 8000a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a6e:	4303      	orrs	r3, r0
 8000a70:	604b      	str	r3, [r1, #4]
 8000a72:	e7bc      	b.n	80009ee <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a74:	6872      	ldr	r2, [r6, #4]
 8000a76:	4c35      	ldr	r4, [pc, #212]	; (8000b4c <HAL_RCC_ClockConfig+0x178>)
 8000a78:	2a01      	cmp	r2, #1
 8000a7a:	d128      	bne.n	8000ace <HAL_RCC_ClockConfig+0xfa>
 8000a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a80:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a84:	6821      	ldr	r1, [r4, #0]
 8000a86:	fa93 f3a3 	rbit	r3, r3
 8000a8a:	fab3 f383 	clz	r3, r3
 8000a8e:	f003 031f 	and.w	r3, r3, #31
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a98:	d0e1      	beq.n	8000a5e <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a9a:	6863      	ldr	r3, [r4, #4]
 8000a9c:	f023 0303 	bic.w	r3, r3, #3
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000aa4:	f7ff fbbe 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aa8:	6873      	ldr	r3, [r6, #4]
 8000aaa:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000aac:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aae:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab2:	d11f      	bne.n	8000af4 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ab4:	6863      	ldr	r3, [r4, #4]
 8000ab6:	f003 030c 	and.w	r3, r3, #12
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d099      	beq.n	80009f2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000abe:	f7ff fbb1 	bl	8000224 <HAL_GetTick>
 8000ac2:	1bc0      	subs	r0, r0, r7
 8000ac4:	4540      	cmp	r0, r8
 8000ac6:	d9f5      	bls.n	8000ab4 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000ac8:	2003      	movs	r0, #3
 8000aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ace:	2a02      	cmp	r2, #2
 8000ad0:	bf0c      	ite	eq
 8000ad2:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000ad6:	2302      	movne	r3, #2
 8000ad8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000adc:	6820      	ldr	r0, [r4, #0]
 8000ade:	fa93 f3a3 	rbit	r3, r3
 8000ae2:	fab3 f383 	clz	r3, r3
 8000ae6:	f003 031f 	and.w	r3, r3, #31
 8000aea:	2101      	movs	r1, #1
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	4203      	tst	r3, r0
 8000af2:	e7d1      	b.n	8000a98 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d110      	bne.n	8000b1a <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000af8:	6863      	ldr	r3, [r4, #4]
 8000afa:	f003 030c 	and.w	r3, r3, #12
 8000afe:	2b08      	cmp	r3, #8
 8000b00:	f43f af77 	beq.w	80009f2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b04:	f7ff fb8e 	bl	8000224 <HAL_GetTick>
 8000b08:	1bc0      	subs	r0, r0, r7
 8000b0a:	4540      	cmp	r0, r8
 8000b0c:	d9f4      	bls.n	8000af8 <HAL_RCC_ClockConfig+0x124>
 8000b0e:	e7db      	b.n	8000ac8 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b10:	f7ff fb88 	bl	8000224 <HAL_GetTick>
 8000b14:	1bc0      	subs	r0, r0, r7
 8000b16:	4540      	cmp	r0, r8
 8000b18:	d8d6      	bhi.n	8000ac8 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b1a:	6863      	ldr	r3, [r4, #4]
 8000b1c:	f013 0f0c 	tst.w	r3, #12
 8000b20:	d1f6      	bne.n	8000b10 <HAL_RCC_ClockConfig+0x13c>
 8000b22:	e766      	b.n	80009f2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b24:	6813      	ldr	r3, [r2, #0]
 8000b26:	f023 0307 	bic.w	r3, r3, #7
 8000b2a:	432b      	orrs	r3, r5
 8000b2c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	429d      	cmp	r5, r3
 8000b36:	d192      	bne.n	8000a5e <HAL_RCC_ClockConfig+0x8a>
 8000b38:	e762      	b.n	8000a00 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b3a:	6863      	ldr	r3, [r4, #4]
 8000b3c:	68f1      	ldr	r1, [r6, #12]
 8000b3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b42:	430b      	orrs	r3, r1
 8000b44:	6063      	str	r3, [r4, #4]
 8000b46:	e761      	b.n	8000a0c <HAL_RCC_ClockConfig+0x38>
 8000b48:	40022000 	.word	0x40022000
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	08001627 	.word	0x08001627
 8000b54:	20000000 	.word	0x20000000

08000b58 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000b58:	4b01      	ldr	r3, [pc, #4]	; (8000b60 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000

08000b64 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	fa92 f2a2 	rbit	r2, r2
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b78:	40d3      	lsrs	r3, r2
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000b80:	6810      	ldr	r0, [r2, #0]
}    
 8000b82:	40d8      	lsrs	r0, r3
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	08001637 	.word	0x08001637
 8000b90:	20000000 	.word	0x20000000

08000b94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b96:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	fa92 f2a2 	rbit	r2, r2
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000ba8:	40d3      	lsrs	r3, r2
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8000bac:	5cd3      	ldrb	r3, [r2, r3]
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000bb0:	6810      	ldr	r0, [r2, #0]
} 
 8000bb2:	40d8      	lsrs	r0, r3
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	08001637 	.word	0x08001637
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000bc4:	b538      	push	{r3, r4, r5, lr}
 8000bc6:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000bc8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000bca:	6921      	ldr	r1, [r4, #16]
 8000bcc:	68a3      	ldr	r3, [r4, #8]
 8000bce:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000bd0:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	6961      	ldr	r1, [r4, #20]
 8000bd6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000bd8:	4949      	ldr	r1, [pc, #292]	; (8000d00 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000bda:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000bdc:	4001      	ands	r1, r0
 8000bde:	430b      	orrs	r3, r1
 8000be0:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000be2:	686b      	ldr	r3, [r5, #4]
 8000be4:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000be6:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000be8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bec:	430b      	orrs	r3, r1
 8000bee:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000bf0:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000bf2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000bf4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000bf8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000bfe:	4b41      	ldr	r3, [pc, #260]	; (8000d04 <UART_SetConfig+0x140>)
 8000c00:	429d      	cmp	r5, r3
 8000c02:	d112      	bne.n	8000c2a <UART_SetConfig+0x66>
 8000c04:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000c08:	493f      	ldr	r1, [pc, #252]	; (8000d08 <UART_SetConfig+0x144>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c10:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000c14:	5ccb      	ldrb	r3, [r1, r3]
 8000c16:	d13b      	bne.n	8000c90 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d836      	bhi.n	8000c8a <UART_SetConfig+0xc6>
 8000c1c:	e8df f003 	tbb	[pc, r3]
 8000c20:	3524210f 	.word	0x3524210f
 8000c24:	3535352d 	.word	0x3535352d
 8000c28:	30          	.byte	0x30
 8000c29:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <UART_SetConfig+0x148>)
 8000c2c:	429d      	cmp	r5, r3
 8000c2e:	d003      	beq.n	8000c38 <UART_SetConfig+0x74>
 8000c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c34:	429d      	cmp	r5, r3
 8000c36:	d15e      	bne.n	8000cf6 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c38:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000c3c:	d131      	bne.n	8000ca2 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000c3e:	f7ff ff91 	bl	8000b64 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000c42:	6861      	ldr	r1, [r4, #4]
 8000c44:	084a      	lsrs	r2, r1, #1
 8000c46:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000c4e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8000c50:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8000c52:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8000c56:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000c58:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60cb      	str	r3, [r1, #12]
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000c62:	f7ff ff97 	bl	8000b94 <HAL_RCC_GetPCLK2Freq>
 8000c66:	e7ec      	b.n	8000c42 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000c68:	6860      	ldr	r0, [r4, #4]
 8000c6a:	0843      	lsrs	r3, r0, #1
 8000c6c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000c70:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000c74:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c78:	e7e9      	b.n	8000c4e <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000c7a:	f7ff fe79 	bl	8000970 <HAL_RCC_GetSysClockFreq>
 8000c7e:	e7e0      	b.n	8000c42 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000c80:	6860      	ldr	r0, [r4, #4]
 8000c82:	0843      	lsrs	r3, r0, #1
 8000c84:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000c88:	e7f4      	b.n	8000c74 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8000c8a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e7e0      	b.n	8000c52 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8000c90:	2b08      	cmp	r3, #8
 8000c92:	d833      	bhi.n	8000cfc <UART_SetConfig+0x138>
 8000c94:	e8df f003 	tbb	[pc, r3]
 8000c98:	321b1005 	.word	0x321b1005
 8000c9c:	32323227 	.word	0x32323227
 8000ca0:	2a          	.byte	0x2a
 8000ca1:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000ca2:	f7ff ff5f 	bl	8000b64 <HAL_RCC_GetPCLK1Freq>
 8000ca6:	6863      	ldr	r3, [r4, #4]
 8000ca8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000cac:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cb0:	b280      	uxth	r0, r0
 8000cb2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000cb4:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 8000cb6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000cb8:	f7ff ff6c 	bl	8000b94 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000cbc:	6863      	ldr	r3, [r4, #4]
 8000cbe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000cc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <UART_SetConfig+0x140>)
 8000cc8:	b280      	uxth	r0, r0
 8000cca:	60d8      	str	r0, [r3, #12]
 8000ccc:	e7f2      	b.n	8000cb4 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000cce:	6862      	ldr	r2, [r4, #4]
 8000cd0:	0853      	lsrs	r3, r2, #1
 8000cd2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000cd6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cde:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <UART_SetConfig+0x140>)
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	60d3      	str	r3, [r2, #12]
 8000ce4:	e7e6      	b.n	8000cb4 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000ce6:	f7ff fe43 	bl	8000970 <HAL_RCC_GetSysClockFreq>
 8000cea:	e7e7      	b.n	8000cbc <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000cec:	6862      	ldr	r2, [r4, #4]
 8000cee:	0853      	lsrs	r3, r2, #1
 8000cf0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000cf4:	e7f1      	b.n	8000cda <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000cf6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000cfa:	d0c6      	beq.n	8000c8a <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000cfc:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000cfe:	bd38      	pop	{r3, r4, r5, pc}
 8000d00:	efff69f3 	.word	0xefff69f3
 8000d04:	40013800 	.word	0x40013800
 8000d08:	080015b4 	.word	0x080015b4
 8000d0c:	40004400 	.word	0x40004400

08000d10 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000d10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d12:	07da      	lsls	r2, r3, #31
{
 8000d14:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000d16:	d506      	bpl.n	8000d26 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000d18:	6801      	ldr	r1, [r0, #0]
 8000d1a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8000d1c:	684a      	ldr	r2, [r1, #4]
 8000d1e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000d22:	4322      	orrs	r2, r4
 8000d24:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8000d26:	079c      	lsls	r4, r3, #30
 8000d28:	d506      	bpl.n	8000d38 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8000d2a:	6801      	ldr	r1, [r0, #0]
 8000d2c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000d2e:	684a      	ldr	r2, [r1, #4]
 8000d30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d34:	4322      	orrs	r2, r4
 8000d36:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8000d38:	0759      	lsls	r1, r3, #29
 8000d3a:	d506      	bpl.n	8000d4a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8000d3c:	6801      	ldr	r1, [r0, #0]
 8000d3e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000d40:	684a      	ldr	r2, [r1, #4]
 8000d42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d46:	4322      	orrs	r2, r4
 8000d48:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8000d4a:	071a      	lsls	r2, r3, #28
 8000d4c:	d506      	bpl.n	8000d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8000d4e:	6801      	ldr	r1, [r0, #0]
 8000d50:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000d52:	684a      	ldr	r2, [r1, #4]
 8000d54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d58:	4322      	orrs	r2, r4
 8000d5a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8000d5c:	06dc      	lsls	r4, r3, #27
 8000d5e:	d506      	bpl.n	8000d6e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8000d60:	6801      	ldr	r1, [r0, #0]
 8000d62:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000d64:	688a      	ldr	r2, [r1, #8]
 8000d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d6a:	4322      	orrs	r2, r4
 8000d6c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8000d6e:	0699      	lsls	r1, r3, #26
 8000d70:	d506      	bpl.n	8000d80 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8000d72:	6801      	ldr	r1, [r0, #0]
 8000d74:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000d76:	688a      	ldr	r2, [r1, #8]
 8000d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d7c:	4322      	orrs	r2, r4
 8000d7e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8000d80:	065a      	lsls	r2, r3, #25
 8000d82:	d50f      	bpl.n	8000da4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000d84:	6801      	ldr	r1, [r0, #0]
 8000d86:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000d88:	684a      	ldr	r2, [r1, #4]
 8000d8a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000d8e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000d90:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000d94:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000d96:	d105      	bne.n	8000da4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8000d98:	684a      	ldr	r2, [r1, #4]
 8000d9a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000d9c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8000da0:	4322      	orrs	r2, r4
 8000da2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8000da4:	061b      	lsls	r3, r3, #24
 8000da6:	d506      	bpl.n	8000db6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8000da8:	6802      	ldr	r2, [r0, #0]
 8000daa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000dac:	6853      	ldr	r3, [r2, #4]
 8000dae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000db2:	430b      	orrs	r3, r1
 8000db4:	6053      	str	r3, [r2, #4]
 8000db6:	bd10      	pop	{r4, pc}

08000db8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dbc:	9d06      	ldr	r5, [sp, #24]
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	4616      	mov	r6, r2
 8000dc4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000dc6:	6821      	ldr	r1, [r4, #0]
 8000dc8:	69ca      	ldr	r2, [r1, #28]
 8000dca:	ea37 0302 	bics.w	r3, r7, r2
 8000dce:	bf0c      	ite	eq
 8000dd0:	2201      	moveq	r2, #1
 8000dd2:	2200      	movne	r2, #0
 8000dd4:	42b2      	cmp	r2, r6
 8000dd6:	d002      	beq.n	8000dde <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000dd8:	2000      	movs	r0, #0
}
 8000dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000dde:	1c6b      	adds	r3, r5, #1
 8000de0:	d0f2      	beq.n	8000dc8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000de2:	b99d      	cbnz	r5, 8000e0c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000dec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	f022 0201 	bic.w	r2, r2, #1
 8000df4:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000df6:	2320      	movs	r3, #32
 8000df8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8000dfc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8000e00:	2300      	movs	r3, #0
 8000e02:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8000e06:	2003      	movs	r0, #3
 8000e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000e0c:	f7ff fa0a 	bl	8000224 <HAL_GetTick>
 8000e10:	eba0 0008 	sub.w	r0, r0, r8
 8000e14:	4285      	cmp	r5, r0
 8000e16:	d2d6      	bcs.n	8000dc6 <UART_WaitOnFlagUntilTimeout+0xe>
 8000e18:	e7e4      	b.n	8000de4 <UART_WaitOnFlagUntilTimeout+0x2c>

08000e1a <HAL_UART_Transmit>:
{
 8000e1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000e1e:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000e20:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000e24:	2b20      	cmp	r3, #32
{
 8000e26:	4604      	mov	r4, r0
 8000e28:	460d      	mov	r5, r1
 8000e2a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000e2c:	d14c      	bne.n	8000ec8 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d048      	beq.n	8000ec4 <HAL_UART_Transmit+0xaa>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d046      	beq.n	8000ec4 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8000e36:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d044      	beq.n	8000ec8 <HAL_UART_Transmit+0xae>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e48:	2321      	movs	r3, #33	; 0x21
 8000e4a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8000e4e:	f7ff f9e9 	bl	8000224 <HAL_GetTick>
    huart->TxXferSize = Size;
 8000e52:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8000e56:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8000e58:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8000e5c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8000e60:	b292      	uxth	r2, r2
 8000e62:	b962      	cbnz	r2, 8000e7e <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e64:	9700      	str	r7, [sp, #0]
 8000e66:	4633      	mov	r3, r6
 8000e68:	2140      	movs	r1, #64	; 0x40
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f7ff ffa4 	bl	8000db8 <UART_WaitOnFlagUntilTimeout>
 8000e70:	b998      	cbnz	r0, 8000e9a <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8000e72:	2320      	movs	r3, #32
 8000e74:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8000e78:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8000e7c:	e00e      	b.n	8000e9c <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8000e7e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e82:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8000e84:	3b01      	subs	r3, #1
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4633      	mov	r3, r6
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	4620      	mov	r0, r4
 8000e94:	f7ff ff90 	bl	8000db8 <UART_WaitOnFlagUntilTimeout>
 8000e98:	b118      	cbz	r0, 8000ea2 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8000e9a:	2003      	movs	r0, #3
}
 8000e9c:	b002      	add	sp, #8
 8000e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000ea2:	68a3      	ldr	r3, [r4, #8]
 8000ea4:	6822      	ldr	r2, [r4, #0]
 8000ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eaa:	d107      	bne.n	8000ebc <HAL_UART_Transmit+0xa2>
 8000eac:	6923      	ldr	r3, [r4, #16]
 8000eae:	b92b      	cbnz	r3, 8000ebc <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8000eb0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eb8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8000eba:	e7cf      	b.n	8000e5c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8000ebc:	782b      	ldrb	r3, [r5, #0]
 8000ebe:	8513      	strh	r3, [r2, #40]	; 0x28
 8000ec0:	3501      	adds	r5, #1
 8000ec2:	e7cb      	b.n	8000e5c <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	e7e9      	b.n	8000e9c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8000ec8:	2002      	movs	r0, #2
 8000eca:	e7e7      	b.n	8000e9c <HAL_UART_Transmit+0x82>

08000ecc <HAL_UART_Receive>:
{
 8000ecc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000ed0:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8000ed2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8000ed6:	2b20      	cmp	r3, #32
{
 8000ed8:	4604      	mov	r4, r0
 8000eda:	460d      	mov	r5, r1
 8000edc:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8000ede:	d160      	bne.n	8000fa2 <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 8000ee0:	2900      	cmp	r1, #0
 8000ee2:	d05c      	beq.n	8000f9e <HAL_UART_Receive+0xd2>
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	d05a      	beq.n	8000f9e <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8000ee8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d058      	beq.n	8000fa2 <HAL_UART_Receive+0xd6>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000efa:	2322      	movs	r3, #34	; 0x22
 8000efc:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8000f00:	f7ff f990 	bl	8000224 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8000f04:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8000f06:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8000f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8000f0e:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8000f10:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8000f14:	d115      	bne.n	8000f42 <HAL_UART_Receive+0x76>
 8000f16:	6923      	ldr	r3, [r4, #16]
 8000f18:	b98b      	cbnz	r3, 8000f3e <HAL_UART_Receive+0x72>
 8000f1a:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000f1e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8000f22:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8000f26:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8000f2a:	b280      	uxth	r0, r0
 8000f2c:	b9b8      	cbnz	r0, 8000f5e <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8000f2e:	2320      	movs	r3, #32
 8000f30:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8000f34:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8000f38:	b002      	add	sp, #8
 8000f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8000f3e:	23ff      	movs	r3, #255	; 0xff
 8000f40:	e7ed      	b.n	8000f1e <HAL_UART_Receive+0x52>
 8000f42:	b923      	cbnz	r3, 8000f4e <HAL_UART_Receive+0x82>
 8000f44:	6923      	ldr	r3, [r4, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f9      	beq.n	8000f3e <HAL_UART_Receive+0x72>
 8000f4a:	237f      	movs	r3, #127	; 0x7f
 8000f4c:	e7e7      	b.n	8000f1e <HAL_UART_Receive+0x52>
 8000f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f52:	d1e6      	bne.n	8000f22 <HAL_UART_Receive+0x56>
 8000f54:	6923      	ldr	r3, [r4, #16]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f7      	beq.n	8000f4a <HAL_UART_Receive+0x7e>
 8000f5a:	233f      	movs	r3, #63	; 0x3f
 8000f5c:	e7df      	b.n	8000f1e <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 8000f5e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000f62:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 8000f66:	3b01      	subs	r3, #1
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	463b      	mov	r3, r7
 8000f72:	2120      	movs	r1, #32
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff ff1f 	bl	8000db8 <UART_WaitOnFlagUntilTimeout>
 8000f7a:	b9a0      	cbnz	r0, 8000fa6 <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f7c:	68a3      	ldr	r3, [r4, #8]
 8000f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	d106      	bne.n	8000f94 <HAL_UART_Receive+0xc8>
 8000f86:	6922      	ldr	r2, [r4, #16]
 8000f88:	b922      	cbnz	r2, 8000f94 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8000f8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f8c:	4033      	ands	r3, r6
 8000f8e:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8000f92:	e7c8      	b.n	8000f26 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8000f94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f96:	4033      	ands	r3, r6
 8000f98:	702b      	strb	r3, [r5, #0]
 8000f9a:	3501      	adds	r5, #1
 8000f9c:	e7c3      	b.n	8000f26 <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	e7ca      	b.n	8000f38 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	e7c8      	b.n	8000f38 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	e7c6      	b.n	8000f38 <HAL_UART_Receive+0x6c>

08000faa <UART_CheckIdleState>:
{
 8000faa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000fac:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fae:	2600      	movs	r6, #0
 8000fb0:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8000fb2:	f7ff f937 	bl	8000224 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8000fbc:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000fbe:	d417      	bmi.n	8000ff0 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	075b      	lsls	r3, r3, #29
 8000fc6:	d50a      	bpl.n	8000fde <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f7ff feee 	bl	8000db8 <UART_WaitOnFlagUntilTimeout>
 8000fdc:	b9a0      	cbnz	r0, 8001008 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8000fde:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8000fe0:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8000fe2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8000fe6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8000fea:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8000fee:	e00c      	b.n	800100a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	4632      	mov	r2, r6
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000ffe:	4620      	mov	r0, r4
 8001000:	f7ff feda 	bl	8000db8 <UART_WaitOnFlagUntilTimeout>
 8001004:	2800      	cmp	r0, #0
 8001006:	d0db      	beq.n	8000fc0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001008:	2003      	movs	r0, #3
}
 800100a:	b002      	add	sp, #8
 800100c:	bd70      	pop	{r4, r5, r6, pc}

0800100e <HAL_UART_Init>:
{
 800100e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001010:	4604      	mov	r4, r0
 8001012:	b360      	cbz	r0, 800106e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001014:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001018:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800101c:	b91b      	cbnz	r3, 8001026 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800101e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001022:	f000 f93f 	bl	80012a4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001026:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001028:	2324      	movs	r3, #36	; 0x24
 800102a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff fdc4 	bl	8000bc4 <UART_SetConfig>
 800103c:	2801      	cmp	r0, #1
 800103e:	d016      	beq.n	800106e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001042:	b113      	cbz	r3, 800104a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff fe63 	bl	8000d10 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800105a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001062:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800106a:	f7ff bf9e 	b.w	8000faa <UART_CheckIdleState>
}
 800106e:	2001      	movs	r0, #1
 8001070:	bd10      	pop	{r4, pc}

08001072 <get_option>:
  }
  /* USER CODE END 3 */

}
//Lee opcion UART
uint8_t get_option(UART_HandleTypeDef* huart){
 8001072:	b507      	push	{r0, r1, r2, lr}
	uint8_t rx_buff[RX_BUFF_SIZE];
	if(HAL_UART_Receive(huart,rx_buff,RX_BUFF_SIZE,HAL_MAX_DELAY) != HAL_OK)
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	2203      	movs	r2, #3
 800107a:	a901      	add	r1, sp, #4
 800107c:	f7ff ff26 	bl	8000ecc <HAL_UART_Receive>
		Error_Handler();
	return atoi(rx_buff);
 8001080:	a801      	add	r0, sp, #4
 8001082:	f000 f99a 	bl	80013ba <atoi>
}
 8001086:	b2c0      	uxtb	r0, r0
 8001088:	b003      	add	sp, #12
 800108a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001090 <print_menu>:
//imprime menu por UART (COM3)
void print_menu(UART_HandleTypeDef* huart){
 8001090:	b510      	push	{r4, lr}
	  if(HAL_UART_Transmit(huart,(uint8_t*)LINE1,strlen(LINE1),HAL_MAX_DELAY) != HAL_OK)
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
void print_menu(UART_HandleTypeDef* huart){
 8001096:	4604      	mov	r4, r0
	  if(HAL_UART_Transmit(huart,(uint8_t*)LINE1,strlen(LINE1),HAL_MAX_DELAY) != HAL_OK)
 8001098:	2215      	movs	r2, #21
 800109a:	490d      	ldr	r1, [pc, #52]	; (80010d0 <print_menu+0x40>)
 800109c:	f7ff febd 	bl	8000e1a <HAL_UART_Transmit>
		  Error_Handler();
	  if(HAL_UART_Transmit(huart,(uint8_t*)LINE2,strlen(LINE2),HAL_MAX_DELAY) != HAL_OK)
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	2213      	movs	r2, #19
 80010a6:	490b      	ldr	r1, [pc, #44]	; (80010d4 <print_menu+0x44>)
 80010a8:	4620      	mov	r0, r4
 80010aa:	f7ff feb6 	bl	8000e1a <HAL_UART_Transmit>
		  Error_Handler();
	  if(HAL_UART_Transmit(huart,(uint8_t*)LINE3,strlen(LINE3),HAL_MAX_DELAY) != HAL_OK)
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	2210      	movs	r2, #16
 80010b4:	4908      	ldr	r1, [pc, #32]	; (80010d8 <print_menu+0x48>)
 80010b6:	4620      	mov	r0, r4
 80010b8:	f7ff feaf 	bl	8000e1a <HAL_UART_Transmit>
		  Error_Handler();
	  if(HAL_UART_Transmit(huart,(uint8_t*)PROMT,strlen(PROMT),HAL_MAX_DELAY) != HAL_OK)
 80010bc:	4620      	mov	r0, r4
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	2204      	movs	r2, #4
 80010c4:	4905      	ldr	r1, [pc, #20]	; (80010dc <print_menu+0x4c>)
		  Error_Handler();
}
 80010c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  if(HAL_UART_Transmit(huart,(uint8_t*)PROMT,strlen(PROMT),HAL_MAX_DELAY) != HAL_OK)
 80010ca:	f7ff bea6 	b.w	8000e1a <HAL_UART_Transmit>
 80010ce:	bf00      	nop
 80010d0:	080015e7 	.word	0x080015e7
 80010d4:	080015fd 	.word	0x080015fd
 80010d8:	08001611 	.word	0x08001611
 80010dc:	08001622 	.word	0x08001622

080010e0 <operaLed>:
//Enciende LED EN PA0
void operaLed(uint8_t estado,UART_HandleTypeDef* huart){
 80010e0:	b510      	push	{r4, lr}
	switch(estado){
 80010e2:	4602      	mov	r2, r0
void operaLed(uint8_t estado,UART_HandleTypeDef* huart){
 80010e4:	460c      	mov	r4, r1
	switch(estado){
 80010e6:	b130      	cbz	r0, 80010f6 <operaLed+0x16>
 80010e8:	2801      	cmp	r0, #1
 80010ea:	d012      	beq.n	8001112 <operaLed+0x32>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
			if(HAL_UART_Transmit(huart,(uint8_t*)LED_ON,strlen(LED_ON),HAL_MAX_DELAY) != HAL_OK)
				  Error_Handler();
			break;
	default:
			if(HAL_UART_Transmit(huart,(uint8_t*)ERROR_INPUT,strlen(ERROR_INPUT),HAL_MAX_DELAY) != HAL_OK)
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	490d      	ldr	r1, [pc, #52]	; (8001128 <operaLed+0x48>)
 80010f4:	e008      	b.n	8001108 <operaLed+0x28>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 80010f6:	2101      	movs	r1, #1
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f7ff f9c0 	bl	8000480 <HAL_GPIO_WritePin>
			if(HAL_UART_Transmit(huart,(uint8_t*)LED_OFF,strlen(LED_OFF),HAL_MAX_DELAY) != HAL_OK)
 8001100:	490a      	ldr	r1, [pc, #40]	; (800112c <operaLed+0x4c>)
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	220d      	movs	r2, #13
			if(HAL_UART_Transmit(huart,(uint8_t*)ERROR_INPUT,strlen(ERROR_INPUT),HAL_MAX_DELAY) != HAL_OK)
 8001108:	4620      	mov	r0, r4
				Error_Handler();
			break;
	}
}
 800110a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			if(HAL_UART_Transmit(huart,(uint8_t*)ERROR_INPUT,strlen(ERROR_INPUT),HAL_MAX_DELAY) != HAL_OK)
 800110e:	f7ff be84 	b.w	8000e1a <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8001112:	4601      	mov	r1, r0
 8001114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001118:	f7ff f9b2 	bl	8000480 <HAL_GPIO_WritePin>
			if(HAL_UART_Transmit(huart,(uint8_t*)LED_ON,strlen(LED_ON),HAL_MAX_DELAY) != HAL_OK)
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	220f      	movs	r2, #15
 8001122:	4903      	ldr	r1, [pc, #12]	; (8001130 <operaLed+0x50>)
 8001124:	e7f0      	b.n	8001108 <operaLed+0x28>
 8001126:	bf00      	nop
 8001128:	080015d6 	.word	0x080015d6
 800112c:	080015b8 	.word	0x080015b8
 8001130:	080015c6 	.word	0x080015c6

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b510      	push	{r4, lr}
 8001136:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800113e:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001142:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001144:	2310      	movs	r3, #16
 8001146:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001148:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f7ff f99f 	bl	800048c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800114e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001150:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001152:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001156:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115e:	f7ff fc39 	bl	80009d4 <HAL_RCC_ClockConfig>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001162:	f7ff fcf9 	bl	8000b58 <HAL_RCC_GetHCLKFreq>
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb0 f0f3 	udiv	r0, r0, r3
 800116e:	f7ff f8a5 	bl	80002bc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001172:	2004      	movs	r0, #4
 8001174:	f7ff f8b8 	bl	80002e8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001178:	4622      	mov	r2, r4
 800117a:	4621      	mov	r1, r4
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff f868 	bl	8000254 <HAL_NVIC_SetPriority>
}
 8001184:	b010      	add	sp, #64	; 0x40
 8001186:	bd10      	pop	{r4, pc}

08001188 <main>:
{
 8001188:	b530      	push	{r4, r5, lr}
 800118a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800118c:	f7ff f830 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8001190:	f7ff ffd0 	bl	8001134 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <main+0x94>)
  huart2.Instance = USART2;
 8001196:	4c22      	ldr	r4, [pc, #136]	; (8001220 <main+0x98>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80011a6:	9201      	str	r2, [sp, #4]
 80011a8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80011bc:	2101      	movs	r1, #1
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80011c6:	f7ff f95b 	bl	8000480 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ca:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	a903      	add	r1, sp, #12
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f7ff f897 	bl	800030c <HAL_GPIO_Init>
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80011de:	4911      	ldr	r1, [pc, #68]	; (8001224 <main+0x9c>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e0:	60e5      	str	r5, [r4, #12]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  huart2.Init.Parity = UART_PARITY_EVEN;
 80011ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f2:	6123      	str	r3, [r4, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f4:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f6:	230c      	movs	r3, #12
 80011f8:	6163      	str	r3, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	61a5      	str	r5, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	61e5      	str	r5, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fe:	6225      	str	r5, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001200:	6265      	str	r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001202:	f7ff ff04 	bl	800100e <HAL_UART_Init>
	 print_menu(&huart2);
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff ff42 	bl	8001090 <print_menu>
	  op = get_option(&huart2);
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff ff30 	bl	8001072 <get_option>
	 operaLed(op,&huart2);
 8001212:	4621      	mov	r1, r4
 8001214:	f7ff ff64 	bl	80010e0 <operaLed>
 8001218:	e7f5      	b.n	8001206 <main+0x7e>
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	200001f4 	.word	0x200001f4
 8001224:	40004400 	.word	0x40004400

08001228 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_MspInit+0x78>)
{
 800122a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122c:	699a      	ldr	r2, [r3, #24]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	619a      	str	r2, [r3, #24]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123c:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	f7fe fff6 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	4611      	mov	r1, r2
 8001248:	f06f 000b 	mvn.w	r0, #11
 800124c:	f7ff f802 	bl	8000254 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	4611      	mov	r1, r2
 8001254:	f06f 000a 	mvn.w	r0, #10
 8001258:	f7fe fffc 	bl	8000254 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	4611      	mov	r1, r2
 8001260:	f06f 0009 	mvn.w	r0, #9
 8001264:	f7fe fff6 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	4611      	mov	r1, r2
 800126c:	f06f 0004 	mvn.w	r0, #4
 8001270:	f7fe fff0 	bl	8000254 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	4611      	mov	r1, r2
 8001278:	f06f 0003 	mvn.w	r0, #3
 800127c:	f7fe ffea 	bl	8000254 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	4611      	mov	r1, r2
 8001284:	f06f 0001 	mvn.w	r0, #1
 8001288:	f7fe ffe4 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	4611      	mov	r1, r2
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7fe ffde 	bl	8000254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001298:	b003      	add	sp, #12
 800129a:	f85d fb04 	ldr.w	pc, [sp], #4
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80012a6:	6802      	ldr	r2, [r0, #0]
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_UART_MspInit+0x48>)
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d11a      	bne.n	80012e4 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ae:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b4:	69da      	ldr	r2, [r3, #28]
 80012b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012ba:	61da      	str	r2, [r3, #28]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80012c6:	f248 0304 	movw	r3, #32772	; 0x8004
 80012ca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012dc:	2307      	movs	r3, #7
 80012de:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f7ff f814 	bl	800030c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012e4:	b007      	add	sp, #28
 80012e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ea:	bf00      	nop
 80012ec:	40004400 	.word	0x40004400

080012f0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80012f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f7fe ff8f 	bl	8000214 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80012fa:	f7ff b802 	b.w	8000302 <HAL_SYSTICK_IRQHandler>
	...

08001300 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4915      	ldr	r1, [pc, #84]	; (8001358 <SystemInit+0x58>)
 8001302:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001306:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <SystemInit+0x5c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001318:	6858      	ldr	r0, [r3, #4]
 800131a:	4a11      	ldr	r2, [pc, #68]	; (8001360 <SystemInit+0x60>)
 800131c:	4002      	ands	r2, r0
 800131e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001326:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800132a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001332:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800133a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800133c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133e:	f022 020f 	bic.w	r2, r2, #15
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001344:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <SystemInit+0x64>)
 8001348:	4002      	ands	r2, r0
 800134a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001354:	608b      	str	r3, [r1, #8]
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	40021000 	.word	0x40021000
 8001360:	f87fc00c 	.word	0xf87fc00c
 8001364:	ff00fccc 	.word	0xff00fccc

08001368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800136c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800136e:	e003      	b.n	8001378 <LoopCopyDataInit>

08001370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001376:	3104      	adds	r1, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800137c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800137e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001380:	d3f6      	bcc.n	8001370 <CopyDataInit>
	ldr	r2, =_sbss
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001384:	e002      	b.n	800138c <LoopFillZerobss>

08001386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001388:	f842 3b04 	str.w	r3, [r2], #4

0800138c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <LoopForever+0x16>)
	cmp	r2, r3
 800138e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001390:	d3f9      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001392:	f7ff ffb5 	bl	8001300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f000 f815 	bl	80013c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800139a:	f7ff fef5 	bl	8001188 <main>

0800139e <LoopForever>:

LoopForever:
    b LoopForever
 800139e:	e7fe      	b.n	800139e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013a0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80013a4:	08001754 	.word	0x08001754
	ldr	r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013ac:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 80013b0:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 80013b4:	20000264 	.word	0x20000264

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>

080013ba <atoi>:
 80013ba:	220a      	movs	r2, #10
 80013bc:	2100      	movs	r1, #0
 80013be:	f000 b8a5 	b.w	800150c <strtol>
	...

080013c4 <__libc_init_array>:
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	4e0d      	ldr	r6, [pc, #52]	; (80013fc <__libc_init_array+0x38>)
 80013c8:	4c0d      	ldr	r4, [pc, #52]	; (8001400 <__libc_init_array+0x3c>)
 80013ca:	1ba4      	subs	r4, r4, r6
 80013cc:	10a4      	asrs	r4, r4, #2
 80013ce:	2500      	movs	r5, #0
 80013d0:	42a5      	cmp	r5, r4
 80013d2:	d109      	bne.n	80013e8 <__libc_init_array+0x24>
 80013d4:	4e0b      	ldr	r6, [pc, #44]	; (8001404 <__libc_init_array+0x40>)
 80013d6:	4c0c      	ldr	r4, [pc, #48]	; (8001408 <__libc_init_array+0x44>)
 80013d8:	f000 f8d0 	bl	800157c <_init>
 80013dc:	1ba4      	subs	r4, r4, r6
 80013de:	10a4      	asrs	r4, r4, #2
 80013e0:	2500      	movs	r5, #0
 80013e2:	42a5      	cmp	r5, r4
 80013e4:	d105      	bne.n	80013f2 <__libc_init_array+0x2e>
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
 80013e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013ec:	4798      	blx	r3
 80013ee:	3501      	adds	r5, #1
 80013f0:	e7ee      	b.n	80013d0 <__libc_init_array+0xc>
 80013f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013f6:	4798      	blx	r3
 80013f8:	3501      	adds	r5, #1
 80013fa:	e7f2      	b.n	80013e2 <__libc_init_array+0x1e>
 80013fc:	0800174c 	.word	0x0800174c
 8001400:	0800174c 	.word	0x0800174c
 8001404:	0800174c 	.word	0x0800174c
 8001408:	08001750 	.word	0x08001750

0800140c <_strtol_l.isra.0>:
 800140c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001410:	4680      	mov	r8, r0
 8001412:	4689      	mov	r9, r1
 8001414:	4692      	mov	sl, r2
 8001416:	461f      	mov	r7, r3
 8001418:	468b      	mov	fp, r1
 800141a:	465d      	mov	r5, fp
 800141c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800141e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001422:	f000 f889 	bl	8001538 <__locale_ctype_ptr_l>
 8001426:	4420      	add	r0, r4
 8001428:	7846      	ldrb	r6, [r0, #1]
 800142a:	f016 0608 	ands.w	r6, r6, #8
 800142e:	d10b      	bne.n	8001448 <_strtol_l.isra.0+0x3c>
 8001430:	2c2d      	cmp	r4, #45	; 0x2d
 8001432:	d10b      	bne.n	800144c <_strtol_l.isra.0+0x40>
 8001434:	782c      	ldrb	r4, [r5, #0]
 8001436:	2601      	movs	r6, #1
 8001438:	f10b 0502 	add.w	r5, fp, #2
 800143c:	b167      	cbz	r7, 8001458 <_strtol_l.isra.0+0x4c>
 800143e:	2f10      	cmp	r7, #16
 8001440:	d114      	bne.n	800146c <_strtol_l.isra.0+0x60>
 8001442:	2c30      	cmp	r4, #48	; 0x30
 8001444:	d00a      	beq.n	800145c <_strtol_l.isra.0+0x50>
 8001446:	e011      	b.n	800146c <_strtol_l.isra.0+0x60>
 8001448:	46ab      	mov	fp, r5
 800144a:	e7e6      	b.n	800141a <_strtol_l.isra.0+0xe>
 800144c:	2c2b      	cmp	r4, #43	; 0x2b
 800144e:	bf04      	itt	eq
 8001450:	782c      	ldrbeq	r4, [r5, #0]
 8001452:	f10b 0502 	addeq.w	r5, fp, #2
 8001456:	e7f1      	b.n	800143c <_strtol_l.isra.0+0x30>
 8001458:	2c30      	cmp	r4, #48	; 0x30
 800145a:	d127      	bne.n	80014ac <_strtol_l.isra.0+0xa0>
 800145c:	782b      	ldrb	r3, [r5, #0]
 800145e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001462:	2b58      	cmp	r3, #88	; 0x58
 8001464:	d14b      	bne.n	80014fe <_strtol_l.isra.0+0xf2>
 8001466:	786c      	ldrb	r4, [r5, #1]
 8001468:	2710      	movs	r7, #16
 800146a:	3502      	adds	r5, #2
 800146c:	2e00      	cmp	r6, #0
 800146e:	bf0c      	ite	eq
 8001470:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8001474:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8001478:	2200      	movs	r2, #0
 800147a:	fbb1 fef7 	udiv	lr, r1, r7
 800147e:	4610      	mov	r0, r2
 8001480:	fb07 1c1e 	mls	ip, r7, lr, r1
 8001484:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001488:	2b09      	cmp	r3, #9
 800148a:	d811      	bhi.n	80014b0 <_strtol_l.isra.0+0xa4>
 800148c:	461c      	mov	r4, r3
 800148e:	42a7      	cmp	r7, r4
 8001490:	dd1d      	ble.n	80014ce <_strtol_l.isra.0+0xc2>
 8001492:	1c53      	adds	r3, r2, #1
 8001494:	d007      	beq.n	80014a6 <_strtol_l.isra.0+0x9a>
 8001496:	4586      	cmp	lr, r0
 8001498:	d316      	bcc.n	80014c8 <_strtol_l.isra.0+0xbc>
 800149a:	d101      	bne.n	80014a0 <_strtol_l.isra.0+0x94>
 800149c:	45a4      	cmp	ip, r4
 800149e:	db13      	blt.n	80014c8 <_strtol_l.isra.0+0xbc>
 80014a0:	fb00 4007 	mla	r0, r0, r7, r4
 80014a4:	2201      	movs	r2, #1
 80014a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80014aa:	e7eb      	b.n	8001484 <_strtol_l.isra.0+0x78>
 80014ac:	270a      	movs	r7, #10
 80014ae:	e7dd      	b.n	800146c <_strtol_l.isra.0+0x60>
 80014b0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80014b4:	2b19      	cmp	r3, #25
 80014b6:	d801      	bhi.n	80014bc <_strtol_l.isra.0+0xb0>
 80014b8:	3c37      	subs	r4, #55	; 0x37
 80014ba:	e7e8      	b.n	800148e <_strtol_l.isra.0+0x82>
 80014bc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80014c0:	2b19      	cmp	r3, #25
 80014c2:	d804      	bhi.n	80014ce <_strtol_l.isra.0+0xc2>
 80014c4:	3c57      	subs	r4, #87	; 0x57
 80014c6:	e7e2      	b.n	800148e <_strtol_l.isra.0+0x82>
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	e7eb      	b.n	80014a6 <_strtol_l.isra.0+0x9a>
 80014ce:	1c53      	adds	r3, r2, #1
 80014d0:	d108      	bne.n	80014e4 <_strtol_l.isra.0+0xd8>
 80014d2:	2322      	movs	r3, #34	; 0x22
 80014d4:	f8c8 3000 	str.w	r3, [r8]
 80014d8:	4608      	mov	r0, r1
 80014da:	f1ba 0f00 	cmp.w	sl, #0
 80014de:	d107      	bne.n	80014f0 <_strtol_l.isra.0+0xe4>
 80014e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014e4:	b106      	cbz	r6, 80014e8 <_strtol_l.isra.0+0xdc>
 80014e6:	4240      	negs	r0, r0
 80014e8:	f1ba 0f00 	cmp.w	sl, #0
 80014ec:	d00c      	beq.n	8001508 <_strtol_l.isra.0+0xfc>
 80014ee:	b122      	cbz	r2, 80014fa <_strtol_l.isra.0+0xee>
 80014f0:	3d01      	subs	r5, #1
 80014f2:	f8ca 5000 	str.w	r5, [sl]
 80014f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014fa:	464d      	mov	r5, r9
 80014fc:	e7f9      	b.n	80014f2 <_strtol_l.isra.0+0xe6>
 80014fe:	2430      	movs	r4, #48	; 0x30
 8001500:	2f00      	cmp	r7, #0
 8001502:	d1b3      	bne.n	800146c <_strtol_l.isra.0+0x60>
 8001504:	2708      	movs	r7, #8
 8001506:	e7b1      	b.n	800146c <_strtol_l.isra.0+0x60>
 8001508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800150c <strtol>:
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <strtol+0x24>)
 800150e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001510:	681c      	ldr	r4, [r3, #0]
 8001512:	4d08      	ldr	r5, [pc, #32]	; (8001534 <strtol+0x28>)
 8001514:	6a23      	ldr	r3, [r4, #32]
 8001516:	2b00      	cmp	r3, #0
 8001518:	bf08      	it	eq
 800151a:	462b      	moveq	r3, r5
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	4613      	mov	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	4601      	mov	r1, r0
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff ff71 	bl	800140c <_strtol_l.isra.0>
 800152a:	b003      	add	sp, #12
 800152c:	bd30      	pop	{r4, r5, pc}
 800152e:	bf00      	nop
 8001530:	20000004 	.word	0x20000004
 8001534:	20000068 	.word	0x20000068

08001538 <__locale_ctype_ptr_l>:
 8001538:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800153c:	4770      	bx	lr

0800153e <__ascii_mbtowc>:
 800153e:	b082      	sub	sp, #8
 8001540:	b901      	cbnz	r1, 8001544 <__ascii_mbtowc+0x6>
 8001542:	a901      	add	r1, sp, #4
 8001544:	b142      	cbz	r2, 8001558 <__ascii_mbtowc+0x1a>
 8001546:	b14b      	cbz	r3, 800155c <__ascii_mbtowc+0x1e>
 8001548:	7813      	ldrb	r3, [r2, #0]
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	1c10      	adds	r0, r2, #0
 8001550:	bf18      	it	ne
 8001552:	2001      	movne	r0, #1
 8001554:	b002      	add	sp, #8
 8001556:	4770      	bx	lr
 8001558:	4610      	mov	r0, r2
 800155a:	e7fb      	b.n	8001554 <__ascii_mbtowc+0x16>
 800155c:	f06f 0001 	mvn.w	r0, #1
 8001560:	e7f8      	b.n	8001554 <__ascii_mbtowc+0x16>

08001562 <__ascii_wctomb>:
 8001562:	b149      	cbz	r1, 8001578 <__ascii_wctomb+0x16>
 8001564:	2aff      	cmp	r2, #255	; 0xff
 8001566:	bf85      	ittet	hi
 8001568:	238a      	movhi	r3, #138	; 0x8a
 800156a:	6003      	strhi	r3, [r0, #0]
 800156c:	700a      	strbls	r2, [r1, #0]
 800156e:	f04f 30ff 	movhi.w	r0, #4294967295
 8001572:	bf98      	it	ls
 8001574:	2001      	movls	r0, #1
 8001576:	4770      	bx	lr
 8001578:	4608      	mov	r0, r1
 800157a:	4770      	bx	lr

0800157c <_init>:
 800157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157e:	bf00      	nop
 8001580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001582:	bc08      	pop	{r3}
 8001584:	469e      	mov	lr, r3
 8001586:	4770      	bx	lr

08001588 <_fini>:
 8001588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158a:	bf00      	nop
 800158c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158e:	bc08      	pop	{r3}
 8001590:	469e      	mov	lr, r3
 8001592:	4770      	bx	lr
